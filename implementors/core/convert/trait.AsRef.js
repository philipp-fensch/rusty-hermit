(function() {var implementors = {};
implementors["ascii"] = [{"text":"impl AsRef&lt;[u8]&gt; for <a class=\"struct\" href=\"ascii/struct.AsciiStr.html\" title=\"struct ascii::AsciiStr\">AsciiStr</a>","synthetic":false,"types":["ascii::ascii_str::AsciiStr"]},{"text":"impl AsRef&lt;str&gt; for <a class=\"struct\" href=\"ascii/struct.AsciiStr.html\" title=\"struct ascii::AsciiStr\">AsciiStr</a>","synthetic":false,"types":["ascii::ascii_str::AsciiStr"]},{"text":"impl AsRef&lt;[<a class=\"enum\" href=\"ascii/enum.AsciiChar.html\" title=\"enum ascii::AsciiChar\">AsciiChar</a>]&gt; for <a class=\"struct\" href=\"ascii/struct.AsciiStr.html\" title=\"struct ascii::AsciiStr\">AsciiStr</a>","synthetic":false,"types":["ascii::ascii_str::AsciiStr"]},{"text":"impl AsRef&lt;<a class=\"struct\" href=\"ascii/struct.AsciiStr.html\" title=\"struct ascii::AsciiStr\">AsciiStr</a>&gt; for <a class=\"struct\" href=\"ascii/struct.AsciiStr.html\" title=\"struct ascii::AsciiStr\">AsciiStr</a>","synthetic":false,"types":["ascii::ascii_str::AsciiStr"]},{"text":"impl AsRef&lt;<a class=\"struct\" href=\"ascii/struct.AsciiStr.html\" title=\"struct ascii::AsciiStr\">AsciiStr</a>&gt; for [<a class=\"enum\" href=\"ascii/enum.AsciiChar.html\" title=\"enum ascii::AsciiChar\">AsciiChar</a>]","synthetic":false,"types":["ascii::ascii_char::AsciiChar"]},{"text":"impl AsRef&lt;<a class=\"struct\" href=\"ascii/struct.AsciiStr.html\" title=\"struct ascii::AsciiStr\">AsciiStr</a>&gt; for <a class=\"enum\" href=\"ascii/enum.AsciiChar.html\" title=\"enum ascii::AsciiChar\">AsciiChar</a>","synthetic":false,"types":["ascii::ascii_char::AsciiChar"]},{"text":"impl AsRef&lt;<a class=\"struct\" href=\"ascii/struct.AsciiStr.html\" title=\"struct ascii::AsciiStr\">AsciiStr</a>&gt; for <a class=\"struct\" href=\"ascii/struct.AsciiString.html\" title=\"struct ascii::AsciiString\">AsciiString</a>","synthetic":false,"types":["ascii::ascii_string::AsciiString"]},{"text":"impl AsRef&lt;[<a class=\"enum\" href=\"ascii/enum.AsciiChar.html\" title=\"enum ascii::AsciiChar\">AsciiChar</a>]&gt; for <a class=\"struct\" href=\"ascii/struct.AsciiString.html\" title=\"struct ascii::AsciiString\">AsciiString</a>","synthetic":false,"types":["ascii::ascii_string::AsciiString"]},{"text":"impl AsRef&lt;[u8]&gt; for <a class=\"struct\" href=\"ascii/struct.AsciiString.html\" title=\"struct ascii::AsciiString\">AsciiString</a>","synthetic":false,"types":["ascii::ascii_string::AsciiString"]},{"text":"impl AsRef&lt;str&gt; for <a class=\"struct\" href=\"ascii/struct.AsciiString.html\" title=\"struct ascii::AsciiString\">AsciiString</a>","synthetic":false,"types":["ascii::ascii_string::AsciiString"]}];
implementors["bytes"] = [{"text":"impl AsRef&lt;[u8]&gt; for <a class=\"struct\" href=\"bytes/struct.Bytes.html\" title=\"struct bytes::Bytes\">Bytes</a>","synthetic":false,"types":["bytes::bytes::Bytes"]},{"text":"impl AsRef&lt;[u8]&gt; for <a class=\"struct\" href=\"bytes/struct.BytesMut.html\" title=\"struct bytes::BytesMut\">BytesMut</a>","synthetic":false,"types":["bytes::bytes_mut::BytesMut"]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;T:&nbsp;?Sized + <a class=\"trait\" href=\"crossbeam_epoch/trait.Pointable.html\" title=\"trait crossbeam_epoch::Pointable\">Pointable</a>&gt; AsRef&lt;T&gt; for <a class=\"struct\" href=\"crossbeam_epoch/struct.Owned.html\" title=\"struct crossbeam_epoch::Owned\">Owned</a>&lt;T&gt;","synthetic":false,"types":["crossbeam_epoch::atomic::Owned"]}];
implementors["either"] = [{"text":"impl&lt;L, R, Target&gt; AsRef&lt;Target&gt; for <a class=\"enum\" href=\"either/enum.Either.html\" title=\"enum either::Either\">Either</a>&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: AsRef&lt;Target&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AsRef&lt;Target&gt;,&nbsp;</span>","synthetic":false,"types":["either::Either"]},{"text":"impl&lt;L, R&gt; AsRef&lt;str&gt; for <a class=\"enum\" href=\"either/enum.Either.html\" title=\"enum either::Either\">Either</a>&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: AsRef&lt;str&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AsRef&lt;str&gt;,&nbsp;</span>","synthetic":false,"types":["either::Either"]},{"text":"impl&lt;L, R, Target&gt; AsRef&lt;[Target]&gt; for <a class=\"enum\" href=\"either/enum.Either.html\" title=\"enum either::Either\">Either</a>&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: AsRef&lt;[Target]&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AsRef&lt;[Target]&gt;,&nbsp;</span>","synthetic":false,"types":["either::Either"]}];
implementors["smoltcp"] = [{"text":"impl&lt;T:&nbsp;AsRef&lt;[u8]&gt;&gt; AsRef&lt;[u8]&gt; for <a class=\"struct\" href=\"smoltcp/wire/struct.EthernetFrame.html\" title=\"struct smoltcp::wire::EthernetFrame\">Frame</a>&lt;T&gt;","synthetic":false,"types":["smoltcp::wire::ethernet::Frame"]},{"text":"impl&lt;T:&nbsp;AsRef&lt;[u8]&gt;&gt; AsRef&lt;[u8]&gt; for <a class=\"struct\" href=\"smoltcp/wire/struct.ArpPacket.html\" title=\"struct smoltcp::wire::ArpPacket\">Packet</a>&lt;T&gt;","synthetic":false,"types":["smoltcp::wire::arp::Packet"]},{"text":"impl&lt;T:&nbsp;AsRef&lt;[u8]&gt;&gt; AsRef&lt;[u8]&gt; for <a class=\"struct\" href=\"smoltcp/wire/struct.Ipv4Packet.html\" title=\"struct smoltcp::wire::Ipv4Packet\">Packet</a>&lt;T&gt;","synthetic":false,"types":["smoltcp::wire::ipv4::Packet"]},{"text":"impl&lt;T:&nbsp;AsRef&lt;[u8]&gt;&gt; AsRef&lt;[u8]&gt; for <a class=\"struct\" href=\"smoltcp/wire/struct.Ipv6Packet.html\" title=\"struct smoltcp::wire::Ipv6Packet\">Packet</a>&lt;T&gt;","synthetic":false,"types":["smoltcp::wire::ipv6::Packet"]},{"text":"impl&lt;T:&nbsp;AsRef&lt;[u8]&gt;&gt; AsRef&lt;[u8]&gt; for <a class=\"struct\" href=\"smoltcp/wire/struct.Icmpv4Packet.html\" title=\"struct smoltcp::wire::Icmpv4Packet\">Packet</a>&lt;T&gt;","synthetic":false,"types":["smoltcp::wire::icmpv4::Packet"]},{"text":"impl&lt;T:&nbsp;AsRef&lt;[u8]&gt;&gt; AsRef&lt;[u8]&gt; for <a class=\"struct\" href=\"smoltcp/wire/struct.Icmpv6Packet.html\" title=\"struct smoltcp::wire::Icmpv6Packet\">Packet</a>&lt;T&gt;","synthetic":false,"types":["smoltcp::wire::icmpv6::Packet"]},{"text":"impl&lt;T:&nbsp;AsRef&lt;[u8]&gt;&gt; AsRef&lt;[u8]&gt; for <a class=\"struct\" href=\"smoltcp/wire/struct.UdpPacket.html\" title=\"struct smoltcp::wire::UdpPacket\">Packet</a>&lt;T&gt;","synthetic":false,"types":["smoltcp::wire::udp::Packet"]},{"text":"impl&lt;T:&nbsp;AsRef&lt;[u8]&gt;&gt; AsRef&lt;[u8]&gt; for <a class=\"struct\" href=\"smoltcp/wire/struct.TcpPacket.html\" title=\"struct smoltcp::wire::TcpPacket\">Packet</a>&lt;T&gt;","synthetic":false,"types":["smoltcp::wire::tcp::Packet"]}];
implementors["tiny_http"] = [{"text":"impl AsRef&lt;u16&gt; for <a class=\"struct\" href=\"tiny_http/struct.StatusCode.html\" title=\"struct tiny_http::StatusCode\">StatusCode</a>","synthetic":false,"types":["tiny_http::common::StatusCode"]}];
implementors["tinyvec"] = [{"text":"impl&lt;A:&nbsp;<a class=\"trait\" href=\"tinyvec/trait.Array.html\" title=\"trait tinyvec::Array\">Array</a>&gt; AsRef&lt;[&lt;A as <a class=\"trait\" href=\"tinyvec/trait.Array.html\" title=\"trait tinyvec::Array\">Array</a>&gt;::<a class=\"type\" href=\"tinyvec/trait.Array.html#associatedtype.Item\" title=\"type tinyvec::Array::Item\">Item</a>]&gt; for <a class=\"struct\" href=\"tinyvec/struct.ArrayVec.html\" title=\"struct tinyvec::ArrayVec\">ArrayVec</a>&lt;A&gt;","synthetic":false,"types":["tinyvec::arrayvec::ArrayVec"]},{"text":"impl&lt;'s, T&gt; AsRef&lt;[T]&gt; for <a class=\"struct\" href=\"tinyvec/struct.SliceVec.html\" title=\"struct tinyvec::SliceVec\">SliceVec</a>&lt;'s, T&gt;","synthetic":false,"types":["tinyvec::slicevec::SliceVec"]},{"text":"impl&lt;A:&nbsp;<a class=\"trait\" href=\"tinyvec/trait.Array.html\" title=\"trait tinyvec::Array\">Array</a>&gt; AsRef&lt;[&lt;A as <a class=\"trait\" href=\"tinyvec/trait.Array.html\" title=\"trait tinyvec::Array\">Array</a>&gt;::<a class=\"type\" href=\"tinyvec/trait.Array.html#associatedtype.Item\" title=\"type tinyvec::Array::Item\">Item</a>]&gt; for <a class=\"enum\" href=\"tinyvec/enum.TinyVec.html\" title=\"enum tinyvec::TinyVec\">TinyVec</a>&lt;A&gt;","synthetic":false,"types":["tinyvec::tinyvec::TinyVec"]}];
implementors["url"] = [{"text":"impl AsRef&lt;str&gt; for <a class=\"struct\" href=\"url/struct.Url.html\" title=\"struct url::Url\">Url</a>","synthetic":false,"types":["url::Url"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()