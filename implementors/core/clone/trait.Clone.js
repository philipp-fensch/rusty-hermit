(function() {var implementors = {};
implementors["ansi_term"] = [{"text":"impl Clone for <a class=\"struct\" href=\"ansi_term/struct.Prefix.html\" title=\"struct ansi_term::Prefix\">Prefix</a>","synthetic":false,"types":["ansi_term::ansi::Prefix"]},{"text":"impl Clone for <a class=\"struct\" href=\"ansi_term/struct.Infix.html\" title=\"struct ansi_term::Infix\">Infix</a>","synthetic":false,"types":["ansi_term::ansi::Infix"]},{"text":"impl Clone for <a class=\"struct\" href=\"ansi_term/struct.Suffix.html\" title=\"struct ansi_term::Suffix\">Suffix</a>","synthetic":false,"types":["ansi_term::ansi::Suffix"]},{"text":"impl Clone for <a class=\"struct\" href=\"ansi_term/struct.Style.html\" title=\"struct ansi_term::Style\">Style</a>","synthetic":false,"types":["ansi_term::style::Style"]},{"text":"impl Clone for <a class=\"enum\" href=\"ansi_term/enum.Colour.html\" title=\"enum ansi_term::Colour\">Colour</a>","synthetic":false,"types":["ansi_term::style::Colour"]},{"text":"impl&lt;'a, S:&nbsp;'a + ToOwned + ?Sized&gt; Clone for <a class=\"struct\" href=\"ansi_term/struct.ANSIGenericString.html\" title=\"struct ansi_term::ANSIGenericString\">ANSIGenericString</a>&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: Debug,&nbsp;</span>","synthetic":false,"types":["ansi_term::display::ANSIGenericString"]}];
implementors["ascii"] = [{"text":"impl Clone for <a class=\"enum\" href=\"ascii/enum.AsciiChar.html\" title=\"enum ascii::AsciiChar\">AsciiChar</a>","synthetic":false,"types":["ascii::ascii_char::AsciiChar"]},{"text":"impl Clone for <a class=\"struct\" href=\"ascii/struct.ToAsciiCharError.html\" title=\"struct ascii::ToAsciiCharError\">ToAsciiCharError</a>","synthetic":false,"types":["ascii::ascii_char::ToAsciiCharError"]},{"text":"impl&lt;'a&gt; Clone for <a class=\"struct\" href=\"ascii/struct.Chars.html\" title=\"struct ascii::Chars\">Chars</a>&lt;'a&gt;","synthetic":false,"types":["ascii::ascii_str::Chars"]},{"text":"impl&lt;'a&gt; Clone for <a class=\"struct\" href=\"ascii/struct.CharsRef.html\" title=\"struct ascii::CharsRef\">CharsRef</a>&lt;'a&gt;","synthetic":false,"types":["ascii::ascii_str::CharsRef"]},{"text":"impl Clone for <a class=\"struct\" href=\"ascii/struct.AsAsciiStrError.html\" title=\"struct ascii::AsAsciiStrError\">AsAsciiStrError</a>","synthetic":false,"types":["ascii::ascii_str::AsAsciiStrError"]},{"text":"impl Clone for <a class=\"struct\" href=\"ascii/struct.AsciiString.html\" title=\"struct ascii::AsciiString\">AsciiString</a>","synthetic":false,"types":["ascii::ascii_string::AsciiString"]},{"text":"impl&lt;O:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"ascii/struct.FromAsciiError.html\" title=\"struct ascii::FromAsciiError\">FromAsciiError</a>&lt;O&gt;","synthetic":false,"types":["ascii::ascii_string::FromAsciiError"]}];
implementors["atty"] = [{"text":"impl Clone for <a class=\"enum\" href=\"atty/enum.Stream.html\" title=\"enum atty::Stream\">Stream</a>","synthetic":false,"types":["atty::Stream"]}];
implementors["byteorder"] = [{"text":"impl Clone for <a class=\"enum\" href=\"byteorder/enum.BigEndian.html\" title=\"enum byteorder::BigEndian\">BigEndian</a>","synthetic":false,"types":["byteorder::BigEndian"]},{"text":"impl Clone for <a class=\"enum\" href=\"byteorder/enum.LittleEndian.html\" title=\"enum byteorder::LittleEndian\">LittleEndian</a>","synthetic":false,"types":["byteorder::LittleEndian"]}];
implementors["bytes"] = [{"text":"impl Clone for <a class=\"struct\" href=\"bytes/struct.Bytes.html\" title=\"struct bytes::Bytes\">Bytes</a>","synthetic":false,"types":["bytes::bytes::Bytes"]},{"text":"impl Clone for <a class=\"struct\" href=\"bytes/struct.BytesMut.html\" title=\"struct bytes::BytesMut\">BytesMut</a>","synthetic":false,"types":["bytes::bytes_mut::BytesMut"]}];
implementors["cache_padded"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"cache_padded/struct.CachePadded.html\" title=\"struct cache_padded::CachePadded\">CachePadded</a>&lt;T&gt;","synthetic":false,"types":["cache_padded::CachePadded"]}];
implementors["chrono"] = [{"text":"impl Clone for <a class=\"struct\" href=\"chrono/struct.Duration.html\" title=\"struct chrono::Duration\">Duration</a>","synthetic":false,"types":["chrono::oldtime::Duration"]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for <a class=\"enum\" href=\"chrono/offset/enum.LocalResult.html\" title=\"enum chrono::offset::LocalResult\">LocalResult</a>&lt;T&gt;","synthetic":false,"types":["chrono::offset::LocalResult"]},{"text":"impl Clone for <a class=\"struct\" href=\"chrono/offset/struct.FixedOffset.html\" title=\"struct chrono::offset::FixedOffset\">FixedOffset</a>","synthetic":false,"types":["chrono::offset::fixed::FixedOffset"]},{"text":"impl Clone for <a class=\"struct\" href=\"chrono/offset/struct.Utc.html\" title=\"struct chrono::offset::Utc\">Utc</a>","synthetic":false,"types":["chrono::offset::utc::Utc"]},{"text":"impl Clone for <a class=\"struct\" href=\"chrono/naive/struct.NaiveDate.html\" title=\"struct chrono::naive::NaiveDate\">NaiveDate</a>","synthetic":false,"types":["chrono::naive::date::NaiveDate"]},{"text":"impl Clone for <a class=\"struct\" href=\"chrono/naive/struct.NaiveDateTime.html\" title=\"struct chrono::naive::NaiveDateTime\">NaiveDateTime</a>","synthetic":false,"types":["chrono::naive::datetime::NaiveDateTime"]},{"text":"impl Clone for <a class=\"struct\" href=\"chrono/naive/struct.IsoWeek.html\" title=\"struct chrono::naive::IsoWeek\">IsoWeek</a>","synthetic":false,"types":["chrono::naive::isoweek::IsoWeek"]},{"text":"impl Clone for <a class=\"struct\" href=\"chrono/naive/struct.NaiveTime.html\" title=\"struct chrono::naive::NaiveTime\">NaiveTime</a>","synthetic":false,"types":["chrono::naive::time::NaiveTime"]},{"text":"impl&lt;Tz:&nbsp;Clone + <a class=\"trait\" href=\"chrono/offset/trait.TimeZone.html\" title=\"trait chrono::offset::TimeZone\">TimeZone</a>&gt; Clone for <a class=\"struct\" href=\"chrono/struct.Date.html\" title=\"struct chrono::Date\">Date</a>&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Tz::<a class=\"type\" href=\"chrono/offset/trait.TimeZone.html#associatedtype.Offset\" title=\"type chrono::offset::TimeZone::Offset\">Offset</a>: Clone,&nbsp;</span>","synthetic":false,"types":["chrono::date::Date"]},{"text":"impl Clone for <a class=\"enum\" href=\"chrono/enum.SecondsFormat.html\" title=\"enum chrono::SecondsFormat\">SecondsFormat</a>","synthetic":false,"types":["chrono::datetime::SecondsFormat"]},{"text":"impl&lt;Tz:&nbsp;Clone + <a class=\"trait\" href=\"chrono/offset/trait.TimeZone.html\" title=\"trait chrono::offset::TimeZone\">TimeZone</a>&gt; Clone for <a class=\"struct\" href=\"chrono/struct.DateTime.html\" title=\"struct chrono::DateTime\">DateTime</a>&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Tz::<a class=\"type\" href=\"chrono/offset/trait.TimeZone.html#associatedtype.Offset\" title=\"type chrono::offset::TimeZone::Offset\">Offset</a>: Clone,&nbsp;</span>","synthetic":false,"types":["chrono::datetime::DateTime"]},{"text":"impl Clone for <a class=\"enum\" href=\"chrono/format/enum.Pad.html\" title=\"enum chrono::format::Pad\">Pad</a>","synthetic":false,"types":["chrono::format::Pad"]},{"text":"impl Clone for <a class=\"enum\" href=\"chrono/format/enum.Numeric.html\" title=\"enum chrono::format::Numeric\">Numeric</a>","synthetic":false,"types":["chrono::format::Numeric"]},{"text":"impl Clone for <a class=\"struct\" href=\"chrono/format/struct.InternalNumeric.html\" title=\"struct chrono::format::InternalNumeric\">InternalNumeric</a>","synthetic":false,"types":["chrono::format::InternalNumeric"]},{"text":"impl Clone for <a class=\"enum\" href=\"chrono/format/enum.Fixed.html\" title=\"enum chrono::format::Fixed\">Fixed</a>","synthetic":false,"types":["chrono::format::Fixed"]},{"text":"impl Clone for <a class=\"struct\" href=\"chrono/format/struct.InternalFixed.html\" title=\"struct chrono::format::InternalFixed\">InternalFixed</a>","synthetic":false,"types":["chrono::format::InternalFixed"]},{"text":"impl&lt;'a&gt; Clone for <a class=\"enum\" href=\"chrono/format/enum.Item.html\" title=\"enum chrono::format::Item\">Item</a>&lt;'a&gt;","synthetic":false,"types":["chrono::format::Item"]},{"text":"impl Clone for <a class=\"struct\" href=\"chrono/format/struct.ParseError.html\" title=\"struct chrono::format::ParseError\">ParseError</a>","synthetic":false,"types":["chrono::format::ParseError"]},{"text":"impl Clone for <a class=\"struct\" href=\"chrono/format/struct.Parsed.html\" title=\"struct chrono::format::Parsed\">Parsed</a>","synthetic":false,"types":["chrono::format::parsed::Parsed"]},{"text":"impl&lt;'a&gt; Clone for <a class=\"struct\" href=\"chrono/format/strftime/struct.StrftimeItems.html\" title=\"struct chrono::format::strftime::StrftimeItems\">StrftimeItems</a>&lt;'a&gt;","synthetic":false,"types":["chrono::format::strftime::StrftimeItems"]},{"text":"impl Clone for <a class=\"enum\" href=\"chrono/enum.RoundingError.html\" title=\"enum chrono::RoundingError\">RoundingError</a>","synthetic":false,"types":["chrono::round::RoundingError"]},{"text":"impl Clone for <a class=\"enum\" href=\"chrono/enum.Weekday.html\" title=\"enum chrono::Weekday\">Weekday</a>","synthetic":false,"types":["chrono::Weekday"]},{"text":"impl Clone for <a class=\"struct\" href=\"chrono/struct.ParseWeekdayError.html\" title=\"struct chrono::ParseWeekdayError\">ParseWeekdayError</a>","synthetic":false,"types":["chrono::ParseWeekdayError"]},{"text":"impl Clone for <a class=\"enum\" href=\"chrono/enum.Month.html\" title=\"enum chrono::Month\">Month</a>","synthetic":false,"types":["chrono::Month"]},{"text":"impl Clone for <a class=\"struct\" href=\"chrono/struct.ParseMonthError.html\" title=\"struct chrono::ParseMonthError\">ParseMonthError</a>","synthetic":false,"types":["chrono::ParseMonthError"]}];
implementors["clap"] = [{"text":"impl Clone for <a class=\"enum\" href=\"clap/enum.AppSettings.html\" title=\"enum clap::AppSettings\">AppSettings</a>","synthetic":false,"types":["clap::app::settings::AppSettings"]},{"text":"impl&lt;'a, 'b&gt; Clone for <a class=\"struct\" href=\"clap/struct.App.html\" title=\"struct clap::App\">App</a>&lt;'a, 'b&gt;","synthetic":false,"types":["clap::app::App"]},{"text":"impl&lt;'a, 'b&gt; Clone for <a class=\"struct\" href=\"clap/struct.Arg.html\" title=\"struct clap::Arg\">Arg</a>&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":false,"types":["clap::args::arg::Arg"]},{"text":"impl&lt;'a&gt; Clone for <a class=\"struct\" href=\"clap/struct.ArgMatches.html\" title=\"struct clap::ArgMatches\">ArgMatches</a>&lt;'a&gt;","synthetic":false,"types":["clap::args::arg_matches::ArgMatches"]},{"text":"impl&lt;'a&gt; Clone for <a class=\"struct\" href=\"clap/struct.Values.html\" title=\"struct clap::Values\">Values</a>&lt;'a&gt;","synthetic":false,"types":["clap::args::arg_matches::Values"]},{"text":"impl&lt;'a&gt; Clone for <a class=\"struct\" href=\"clap/struct.OsValues.html\" title=\"struct clap::OsValues\">OsValues</a>&lt;'a&gt;","synthetic":false,"types":["clap::args::arg_matches::OsValues"]},{"text":"impl&lt;'a&gt; Clone for <a class=\"struct\" href=\"clap/struct.ArgGroup.html\" title=\"struct clap::ArgGroup\">ArgGroup</a>&lt;'a&gt;","synthetic":false,"types":["clap::args::group::ArgGroup"]},{"text":"impl Clone for <a class=\"enum\" href=\"clap/enum.ArgSettings.html\" title=\"enum clap::ArgSettings\">ArgSettings</a>","synthetic":false,"types":["clap::args::settings::ArgSettings"]},{"text":"impl&lt;'a&gt; Clone for <a class=\"struct\" href=\"clap/struct.SubCommand.html\" title=\"struct clap::SubCommand\">SubCommand</a>&lt;'a&gt;","synthetic":false,"types":["clap::args::subcommand::SubCommand"]},{"text":"impl Clone for <a class=\"enum\" href=\"clap/enum.Shell.html\" title=\"enum clap::Shell\">Shell</a>","synthetic":false,"types":["clap::completions::shell::Shell"]},{"text":"impl Clone for <a class=\"enum\" href=\"clap/enum.ErrorKind.html\" title=\"enum clap::ErrorKind\">ErrorKind</a>","synthetic":false,"types":["clap::errors::ErrorKind"]}];
implementors["concurrent_queue"] = [{"text":"impl Clone for <a class=\"enum\" href=\"concurrent_queue/enum.PopError.html\" title=\"enum concurrent_queue::PopError\">PopError</a>","synthetic":false,"types":["concurrent_queue::PopError"]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for <a class=\"enum\" href=\"concurrent_queue/enum.PushError.html\" title=\"enum concurrent_queue::PushError\">PushError</a>&lt;T&gt;","synthetic":false,"types":["concurrent_queue::PushError"]}];
implementors["core_affinity"] = [{"text":"impl Clone for <a class=\"struct\" href=\"core_affinity/struct.CoreId.html\" title=\"struct core_affinity::CoreId\">CoreId</a>","synthetic":false,"types":["core_affinity::CoreId"]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; Clone for <a class=\"struct\" href=\"crossbeam_channel/struct.Sender.html\" title=\"struct crossbeam_channel::Sender\">Sender</a>&lt;T&gt;","synthetic":false,"types":["crossbeam_channel::channel::Sender"]},{"text":"impl&lt;T&gt; Clone for <a class=\"struct\" href=\"crossbeam_channel/struct.Receiver.html\" title=\"struct crossbeam_channel::Receiver\">Receiver</a>&lt;T&gt;","synthetic":false,"types":["crossbeam_channel::channel::Receiver"]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"crossbeam_channel/struct.SendError.html\" title=\"struct crossbeam_channel::SendError\">SendError</a>&lt;T&gt;","synthetic":false,"types":["crossbeam_channel::err::SendError"]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for <a class=\"enum\" href=\"crossbeam_channel/enum.TrySendError.html\" title=\"enum crossbeam_channel::TrySendError\">TrySendError</a>&lt;T&gt;","synthetic":false,"types":["crossbeam_channel::err::TrySendError"]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for <a class=\"enum\" href=\"crossbeam_channel/enum.SendTimeoutError.html\" title=\"enum crossbeam_channel::SendTimeoutError\">SendTimeoutError</a>&lt;T&gt;","synthetic":false,"types":["crossbeam_channel::err::SendTimeoutError"]},{"text":"impl Clone for <a class=\"struct\" href=\"crossbeam_channel/struct.RecvError.html\" title=\"struct crossbeam_channel::RecvError\">RecvError</a>","synthetic":false,"types":["crossbeam_channel::err::RecvError"]},{"text":"impl Clone for <a class=\"enum\" href=\"crossbeam_channel/enum.TryRecvError.html\" title=\"enum crossbeam_channel::TryRecvError\">TryRecvError</a>","synthetic":false,"types":["crossbeam_channel::err::TryRecvError"]},{"text":"impl Clone for <a class=\"enum\" href=\"crossbeam_channel/enum.RecvTimeoutError.html\" title=\"enum crossbeam_channel::RecvTimeoutError\">RecvTimeoutError</a>","synthetic":false,"types":["crossbeam_channel::err::RecvTimeoutError"]},{"text":"impl Clone for <a class=\"struct\" href=\"crossbeam_channel/struct.TrySelectError.html\" title=\"struct crossbeam_channel::TrySelectError\">TrySelectError</a>","synthetic":false,"types":["crossbeam_channel::err::TrySelectError"]},{"text":"impl Clone for <a class=\"struct\" href=\"crossbeam_channel/struct.SelectTimeoutError.html\" title=\"struct crossbeam_channel::SelectTimeoutError\">SelectTimeoutError</a>","synthetic":false,"types":["crossbeam_channel::err::SelectTimeoutError"]},{"text":"impl Clone for <a class=\"struct\" href=\"crossbeam_channel/struct.TryReadyError.html\" title=\"struct crossbeam_channel::TryReadyError\">TryReadyError</a>","synthetic":false,"types":["crossbeam_channel::err::TryReadyError"]},{"text":"impl Clone for <a class=\"struct\" href=\"crossbeam_channel/struct.ReadyTimeoutError.html\" title=\"struct crossbeam_channel::ReadyTimeoutError\">ReadyTimeoutError</a>","synthetic":false,"types":["crossbeam_channel::err::ReadyTimeoutError"]},{"text":"impl&lt;'a&gt; Clone for <a class=\"struct\" href=\"crossbeam_channel/struct.Select.html\" title=\"struct crossbeam_channel::Select\">Select</a>&lt;'a&gt;","synthetic":false,"types":["crossbeam_channel::select::Select"]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; Clone for <a class=\"struct\" href=\"crossbeam_deque/struct.Stealer.html\" title=\"struct crossbeam_deque::Stealer\">Stealer</a>&lt;T&gt;","synthetic":false,"types":["crossbeam_deque::deque::Stealer"]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for <a class=\"enum\" href=\"crossbeam_deque/enum.Steal.html\" title=\"enum crossbeam_deque::Steal\">Steal</a>&lt;T&gt;","synthetic":false,"types":["crossbeam_deque::deque::Steal"]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;T:&nbsp;?Sized + <a class=\"trait\" href=\"crossbeam_epoch/trait.Pointable.html\" title=\"trait crossbeam_epoch::Pointable\">Pointable</a>&gt; Clone for <a class=\"struct\" href=\"crossbeam_epoch/struct.Atomic.html\" title=\"struct crossbeam_epoch::Atomic\">Atomic</a>&lt;T&gt;","synthetic":false,"types":["crossbeam_epoch::atomic::Atomic"]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"crossbeam_epoch/struct.Owned.html\" title=\"struct crossbeam_epoch::Owned\">Owned</a>&lt;T&gt;","synthetic":false,"types":["crossbeam_epoch::atomic::Owned"]},{"text":"impl&lt;T:&nbsp;?Sized + <a class=\"trait\" href=\"crossbeam_epoch/trait.Pointable.html\" title=\"trait crossbeam_epoch::Pointable\">Pointable</a>&gt; Clone for <a class=\"struct\" href=\"crossbeam_epoch/struct.Shared.html\" title=\"struct crossbeam_epoch::Shared\">Shared</a>&lt;'_, T&gt;","synthetic":false,"types":["crossbeam_epoch::atomic::Shared"]},{"text":"impl Clone for <a class=\"struct\" href=\"crossbeam_epoch/struct.Collector.html\" title=\"struct crossbeam_epoch::Collector\">Collector</a>","synthetic":false,"types":["crossbeam_epoch::collector::Collector"]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"crossbeam_utils/struct.CachePadded.html\" title=\"struct crossbeam_utils::CachePadded\">CachePadded</a>&lt;T&gt;","synthetic":false,"types":["crossbeam_utils::cache_padded::CachePadded"]},{"text":"impl Clone for <a class=\"struct\" href=\"crossbeam_utils/sync/struct.Unparker.html\" title=\"struct crossbeam_utils::sync::Unparker\">Unparker</a>","synthetic":false,"types":["crossbeam_utils::sync::parker::Unparker"]},{"text":"impl Clone for <a class=\"struct\" href=\"crossbeam_utils/sync/struct.WaitGroup.html\" title=\"struct crossbeam_utils::sync::WaitGroup\">WaitGroup</a>","synthetic":false,"types":["crossbeam_utils::sync::wait_group::WaitGroup"]}];
implementors["either"] = [{"text":"impl&lt;L:&nbsp;Clone, R:&nbsp;Clone&gt; Clone for <a class=\"enum\" href=\"either/enum.Either.html\" title=\"enum either::Either\">Either</a>&lt;L, R&gt;","synthetic":false,"types":["either::Either"]}];
implementors["fastrand"] = [{"text":"impl Clone for <a class=\"struct\" href=\"fastrand/struct.Rng.html\" title=\"struct fastrand::Rng\">Rng</a>","synthetic":false,"types":["fastrand::Rng"]}];
implementors["form_urlencoded"] = [{"text":"impl&lt;'a&gt; Clone for <a class=\"struct\" href=\"form_urlencoded/struct.Parse.html\" title=\"struct form_urlencoded::Parse\">Parse</a>&lt;'a&gt;","synthetic":false,"types":["form_urlencoded::Parse"]}];
implementors["futures_lite"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"futures_lite/stream/struct.Empty.html\" title=\"struct futures_lite::stream::Empty\">Empty</a>&lt;T&gt;","synthetic":false,"types":["futures_lite::stream::Empty"]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"futures_lite/stream/struct.Iter.html\" title=\"struct futures_lite::stream::Iter\">Iter</a>&lt;I&gt;","synthetic":false,"types":["futures_lite::stream::Iter"]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"futures_lite/stream/struct.Once.html\" title=\"struct futures_lite::stream::Once\">Once</a>&lt;T&gt;","synthetic":false,"types":["futures_lite::stream::Once"]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"futures_lite/stream/struct.Pending.html\" title=\"struct futures_lite::stream::Pending\">Pending</a>&lt;T&gt;","synthetic":false,"types":["futures_lite::stream::Pending"]},{"text":"impl&lt;F:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"futures_lite/stream/struct.PollFn.html\" title=\"struct futures_lite::stream::PollFn\">PollFn</a>&lt;F&gt;","synthetic":false,"types":["futures_lite::stream::PollFn"]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"futures_lite/stream/struct.Repeat.html\" title=\"struct futures_lite::stream::Repeat\">Repeat</a>&lt;T&gt;","synthetic":false,"types":["futures_lite::stream::Repeat"]},{"text":"impl&lt;F:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"futures_lite/stream/struct.RepeatWith.html\" title=\"struct futures_lite::stream::RepeatWith\">RepeatWith</a>&lt;F&gt;","synthetic":false,"types":["futures_lite::stream::RepeatWith"]},{"text":"impl&lt;T:&nbsp;Clone, F:&nbsp;Clone, Fut:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"futures_lite/stream/struct.Unfold.html\" title=\"struct futures_lite::stream::Unfold\">Unfold</a>&lt;T, F, Fut&gt;","synthetic":false,"types":["futures_lite::stream::Unfold"]},{"text":"impl&lt;T:&nbsp;Clone, F:&nbsp;Clone, Fut:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"futures_lite/stream/struct.TryUnfold.html\" title=\"struct futures_lite::stream::TryUnfold\">TryUnfold</a>&lt;T, F, Fut&gt;","synthetic":false,"types":["futures_lite::stream::TryUnfold"]},{"text":"impl&lt;S:&nbsp;Clone, St:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"futures_lite/stream/struct.Scan.html\" title=\"struct futures_lite::stream::Scan\">Scan</a>&lt;S, St, F&gt;","synthetic":false,"types":["futures_lite::stream::Scan"]},{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"futures_lite/stream/struct.Fuse.html\" title=\"struct futures_lite::stream::Fuse\">Fuse</a>&lt;S&gt;","synthetic":false,"types":["futures_lite::stream::Fuse"]},{"text":"impl&lt;S:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"futures_lite/stream/struct.Map.html\" title=\"struct futures_lite::stream::Map\">Map</a>&lt;S, F&gt;","synthetic":false,"types":["futures_lite::stream::Map"]},{"text":"impl&lt;S:&nbsp;Clone, U:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"futures_lite/stream/struct.FlatMap.html\" title=\"struct futures_lite::stream::FlatMap\">FlatMap</a>&lt;S, U, F&gt;","synthetic":false,"types":["futures_lite::stream::FlatMap"]},{"text":"impl&lt;S:&nbsp;Clone + <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a>&gt; Clone for <a class=\"struct\" href=\"futures_lite/stream/struct.Flatten.html\" title=\"struct futures_lite::stream::Flatten\">Flatten</a>&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S::<a class=\"type\" href=\"futures_core/stream/trait.Stream.html#associatedtype.Item\" title=\"type futures_core::stream::Stream::Item\">Item</a>: Clone,&nbsp;</span>","synthetic":false,"types":["futures_lite::stream::Flatten"]},{"text":"impl&lt;S:&nbsp;Clone, F:&nbsp;Clone, Fut:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"futures_lite/stream/struct.Then.html\" title=\"struct futures_lite::stream::Then\">Then</a>&lt;S, F, Fut&gt;","synthetic":false,"types":["futures_lite::stream::Then"]},{"text":"impl&lt;S:&nbsp;Clone, P:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"futures_lite/stream/struct.Filter.html\" title=\"struct futures_lite::stream::Filter\">Filter</a>&lt;S, P&gt;","synthetic":false,"types":["futures_lite::stream::Filter"]},{"text":"impl&lt;S1:&nbsp;Clone, S2:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"futures_lite/stream/struct.Or.html\" title=\"struct futures_lite::stream::Or\">Or</a>&lt;S1, S2&gt;","synthetic":false,"types":["futures_lite::stream::Or"]},{"text":"impl&lt;S1:&nbsp;Clone, S2:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"futures_lite/stream/struct.Race.html\" title=\"struct futures_lite::stream::Race\">Race</a>&lt;S1, S2&gt;","synthetic":false,"types":["futures_lite::stream::Race"]},{"text":"impl&lt;S:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"futures_lite/stream/struct.FilterMap.html\" title=\"struct futures_lite::stream::FilterMap\">FilterMap</a>&lt;S, F&gt;","synthetic":false,"types":["futures_lite::stream::FilterMap"]},{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"futures_lite/stream/struct.Take.html\" title=\"struct futures_lite::stream::Take\">Take</a>&lt;S&gt;","synthetic":false,"types":["futures_lite::stream::Take"]},{"text":"impl&lt;S:&nbsp;Clone, P:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"futures_lite/stream/struct.TakeWhile.html\" title=\"struct futures_lite::stream::TakeWhile\">TakeWhile</a>&lt;S, P&gt;","synthetic":false,"types":["futures_lite::stream::TakeWhile"]},{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"futures_lite/stream/struct.Skip.html\" title=\"struct futures_lite::stream::Skip\">Skip</a>&lt;S&gt;","synthetic":false,"types":["futures_lite::stream::Skip"]},{"text":"impl&lt;S:&nbsp;Clone, P:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"futures_lite/stream/struct.SkipWhile.html\" title=\"struct futures_lite::stream::SkipWhile\">SkipWhile</a>&lt;S, P&gt;","synthetic":false,"types":["futures_lite::stream::SkipWhile"]},{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"futures_lite/stream/struct.StepBy.html\" title=\"struct futures_lite::stream::StepBy\">StepBy</a>&lt;S&gt;","synthetic":false,"types":["futures_lite::stream::StepBy"]},{"text":"impl&lt;S:&nbsp;Clone, U:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"futures_lite/stream/struct.Chain.html\" title=\"struct futures_lite::stream::Chain\">Chain</a>&lt;S, U&gt;","synthetic":false,"types":["futures_lite::stream::Chain"]},{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"futures_lite/stream/struct.Cloned.html\" title=\"struct futures_lite::stream::Cloned\">Cloned</a>&lt;S&gt;","synthetic":false,"types":["futures_lite::stream::Cloned"]},{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"futures_lite/stream/struct.Copied.html\" title=\"struct futures_lite::stream::Copied\">Copied</a>&lt;S&gt;","synthetic":false,"types":["futures_lite::stream::Copied"]},{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"futures_lite/stream/struct.Cycle.html\" title=\"struct futures_lite::stream::Cycle\">Cycle</a>&lt;S&gt;","synthetic":false,"types":["futures_lite::stream::Cycle"]},{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"futures_lite/stream/struct.Enumerate.html\" title=\"struct futures_lite::stream::Enumerate\">Enumerate</a>&lt;S&gt;","synthetic":false,"types":["futures_lite::stream::Enumerate"]},{"text":"impl&lt;S:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"futures_lite/stream/struct.Inspect.html\" title=\"struct futures_lite::stream::Inspect\">Inspect</a>&lt;S, F&gt;","synthetic":false,"types":["futures_lite::stream::Inspect"]},{"text":"impl&lt;A:&nbsp;Clone + <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a>, B:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"futures_lite/stream/struct.Zip.html\" title=\"struct futures_lite::stream::Zip\">Zip</a>&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::<a class=\"type\" href=\"futures_core/stream/trait.Stream.html#associatedtype.Item\" title=\"type futures_core::stream::Stream::Item\">Item</a>: Clone,&nbsp;</span>","synthetic":false,"types":["futures_lite::stream::Zip"]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"futures_lite/io/struct.AssertAsync.html\" title=\"struct futures_lite::io::AssertAsync\">AssertAsync</a>&lt;T&gt;","synthetic":false,"types":["futures_lite::io::AssertAsync"]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"futures_lite/io/struct.Cursor.html\" title=\"struct futures_lite::io::Cursor\">Cursor</a>&lt;T&gt;","synthetic":false,"types":["futures_lite::io::Cursor"]}];
implementors["hdrhist"] = [{"text":"impl Clone for <a class=\"struct\" href=\"hdrhist/struct.HDRHist.html\" title=\"struct hdrhist::HDRHist\">HDRHist</a>","synthetic":false,"types":["hdrhist::HDRHist"]}];
implementors["hermit_abi"] = [{"text":"impl Clone for <a class=\"struct\" href=\"hermit_abi/struct.Priority.html\" title=\"struct hermit_abi::Priority\">Priority</a>","synthetic":false,"types":["hermit_abi::Priority"]},{"text":"impl Clone for <a class=\"struct\" href=\"hermit_abi/struct.Handle.html\" title=\"struct hermit_abi::Handle\">Handle</a>","synthetic":false,"types":["hermit_abi::Handle"]},{"text":"impl Clone for <a class=\"struct\" href=\"hermit_abi/struct.timespec.html\" title=\"struct hermit_abi::timespec\">timespec</a>","synthetic":false,"types":["hermit_abi::timespec"]},{"text":"impl Clone for <a class=\"enum\" href=\"hermit_abi/enum.Version.html\" title=\"enum hermit_abi::Version\">Version</a>","synthetic":false,"types":["hermit_abi::Version"]},{"text":"impl Clone for <a class=\"struct\" href=\"hermit_abi/struct.Ipv4Address.html\" title=\"struct hermit_abi::Ipv4Address\">Ipv4Address</a>","synthetic":false,"types":["hermit_abi::Ipv4Address"]},{"text":"impl Clone for <a class=\"struct\" href=\"hermit_abi/struct.Ipv6Address.html\" title=\"struct hermit_abi::Ipv6Address\">Ipv6Address</a>","synthetic":false,"types":["hermit_abi::Ipv6Address"]},{"text":"impl Clone for <a class=\"enum\" href=\"hermit_abi/enum.IpAddress.html\" title=\"enum hermit_abi::IpAddress\">IpAddress</a>","synthetic":false,"types":["hermit_abi::IpAddress"]}];
implementors["idna"] = [{"text":"impl Clone for <a class=\"struct\" href=\"idna/struct.Config.html\" title=\"struct idna::Config\">Config</a>","synthetic":false,"types":["idna::uts46::Config"]}];
implementors["log"] = [{"text":"impl Clone for <a class=\"enum\" href=\"log/enum.Level.html\" title=\"enum log::Level\">Level</a>","synthetic":false,"types":["log::Level"]},{"text":"impl Clone for <a class=\"enum\" href=\"log/enum.LevelFilter.html\" title=\"enum log::LevelFilter\">LevelFilter</a>","synthetic":false,"types":["log::LevelFilter"]},{"text":"impl&lt;'a&gt; Clone for <a class=\"struct\" href=\"log/struct.Record.html\" title=\"struct log::Record\">Record</a>&lt;'a&gt;","synthetic":false,"types":["log::Record"]},{"text":"impl&lt;'a&gt; Clone for <a class=\"struct\" href=\"log/struct.Metadata.html\" title=\"struct log::Metadata\">Metadata</a>&lt;'a&gt;","synthetic":false,"types":["log::Metadata"]}];
implementors["memchr"] = [{"text":"impl Clone for <a class=\"enum\" href=\"memchr/memmem/enum.Prefilter.html\" title=\"enum memchr::memmem::Prefilter\">Prefilter</a>","synthetic":false,"types":["memchr::memmem::prefilter::Prefilter"]},{"text":"impl&lt;'n&gt; Clone for <a class=\"struct\" href=\"memchr/memmem/struct.Finder.html\" title=\"struct memchr::memmem::Finder\">Finder</a>&lt;'n&gt;","synthetic":false,"types":["memchr::memmem::Finder"]},{"text":"impl&lt;'n&gt; Clone for <a class=\"struct\" href=\"memchr/memmem/struct.FinderRev.html\" title=\"struct memchr::memmem::FinderRev\">FinderRev</a>&lt;'n&gt;","synthetic":false,"types":["memchr::memmem::FinderRev"]},{"text":"impl Clone for <a class=\"struct\" href=\"memchr/memmem/struct.FinderBuilder.html\" title=\"struct memchr::memmem::FinderBuilder\">FinderBuilder</a>","synthetic":false,"types":["memchr::memmem::FinderBuilder"]}];
implementors["num_integer"] = [{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"num_integer/struct.ExtendedGcd.html\" title=\"struct num_integer::ExtendedGcd\">ExtendedGcd</a>&lt;A&gt;","synthetic":false,"types":["num_integer::ExtendedGcd"]}];
implementors["parking"] = [{"text":"impl Clone for <a class=\"struct\" href=\"parking/struct.Unparker.html\" title=\"struct parking::Unparker\">Unparker</a>","synthetic":false,"types":["parking::Unparker"]}];
implementors["percent_encoding"] = [{"text":"impl&lt;'a&gt; Clone for <a class=\"struct\" href=\"percent_encoding/struct.PercentEncode.html\" title=\"struct percent_encoding::PercentEncode\">PercentEncode</a>&lt;'a&gt;","synthetic":false,"types":["percent_encoding::PercentEncode"]},{"text":"impl&lt;'a&gt; Clone for <a class=\"struct\" href=\"percent_encoding/struct.PercentDecode.html\" title=\"struct percent_encoding::PercentDecode\">PercentDecode</a>&lt;'a&gt;","synthetic":false,"types":["percent_encoding::PercentDecode"]}];
implementors["raw_cpuid"] = [{"text":"impl Clone for <a class=\"struct\" href=\"raw_cpuid/struct.CpuId.html\" title=\"struct raw_cpuid::CpuId\">CpuId</a>","synthetic":false,"types":["raw_cpuid::CpuId"]},{"text":"impl Clone for <a class=\"struct\" href=\"raw_cpuid/struct.CpuIdResult.html\" title=\"struct raw_cpuid::CpuIdResult\">CpuIdResult</a>","synthetic":false,"types":["raw_cpuid::CpuIdResult"]},{"text":"impl Clone for <a class=\"struct\" href=\"raw_cpuid/struct.CacheInfoIter.html\" title=\"struct raw_cpuid::CacheInfoIter\">CacheInfoIter</a>","synthetic":false,"types":["raw_cpuid::CacheInfoIter"]},{"text":"impl Clone for <a class=\"enum\" href=\"raw_cpuid/enum.CacheInfoType.html\" title=\"enum raw_cpuid::CacheInfoType\">CacheInfoType</a>","synthetic":false,"types":["raw_cpuid::CacheInfoType"]},{"text":"impl Clone for <a class=\"struct\" href=\"raw_cpuid/struct.CacheInfo.html\" title=\"struct raw_cpuid::CacheInfo\">CacheInfo</a>","synthetic":false,"types":["raw_cpuid::CacheInfo"]},{"text":"impl Clone for <a class=\"struct\" href=\"raw_cpuid/struct.CacheParametersIter.html\" title=\"struct raw_cpuid::CacheParametersIter\">CacheParametersIter</a>","synthetic":false,"types":["raw_cpuid::CacheParametersIter"]},{"text":"impl Clone for <a class=\"struct\" href=\"raw_cpuid/struct.CacheParameter.html\" title=\"struct raw_cpuid::CacheParameter\">CacheParameter</a>","synthetic":false,"types":["raw_cpuid::CacheParameter"]},{"text":"impl Clone for <a class=\"struct\" href=\"raw_cpuid/struct.ExtendedTopologyIter.html\" title=\"struct raw_cpuid::ExtendedTopologyIter\">ExtendedTopologyIter</a>","synthetic":false,"types":["raw_cpuid::ExtendedTopologyIter"]},{"text":"impl Clone for <a class=\"struct\" href=\"raw_cpuid/struct.ExtendedStateIter.html\" title=\"struct raw_cpuid::ExtendedStateIter\">ExtendedStateIter</a>","synthetic":false,"types":["raw_cpuid::ExtendedStateIter"]},{"text":"impl Clone for <a class=\"struct\" href=\"raw_cpuid/struct.SgxSectionIter.html\" title=\"struct raw_cpuid::SgxSectionIter\">SgxSectionIter</a>","synthetic":false,"types":["raw_cpuid::SgxSectionIter"]},{"text":"impl Clone for <a class=\"struct\" href=\"raw_cpuid/struct.DatIter.html\" title=\"struct raw_cpuid::DatIter\">DatIter</a>","synthetic":false,"types":["raw_cpuid::DatIter"]}];
implementors["rayon"] = [{"text":"impl&lt;T:&nbsp;Clone + Ord + Send&gt; Clone for <a class=\"struct\" href=\"rayon/collections/binary_heap/struct.IntoIter.html\" title=\"struct rayon::collections::binary_heap::IntoIter\">IntoIter</a>&lt;T&gt;","synthetic":false,"types":["rayon::collections::binary_heap::IntoIter"]},{"text":"impl&lt;'a, T:&nbsp;Ord + Sync&gt; Clone for <a class=\"struct\" href=\"rayon/collections/binary_heap/struct.Iter.html\" title=\"struct rayon::collections::binary_heap::Iter\">Iter</a>&lt;'a, T&gt;","synthetic":false,"types":["rayon::collections::binary_heap::Iter"]},{"text":"impl&lt;'a, K:&nbsp;Ord + Sync, V:&nbsp;Sync&gt; Clone for <a class=\"struct\" href=\"rayon/collections/btree_map/struct.Iter.html\" title=\"struct rayon::collections::btree_map::Iter\">Iter</a>&lt;'a, K, V&gt;","synthetic":false,"types":["rayon::collections::btree_map::Iter"]},{"text":"impl&lt;'a, T:&nbsp;Ord + Sync + 'a&gt; Clone for <a class=\"struct\" href=\"rayon/collections/btree_set/struct.Iter.html\" title=\"struct rayon::collections::btree_set::Iter\">Iter</a>&lt;'a, T&gt;","synthetic":false,"types":["rayon::collections::btree_set::Iter"]},{"text":"impl&lt;'a, K:&nbsp;Hash + Eq + Sync, V:&nbsp;Sync&gt; Clone for <a class=\"struct\" href=\"rayon/collections/hash_map/struct.Iter.html\" title=\"struct rayon::collections::hash_map::Iter\">Iter</a>&lt;'a, K, V&gt;","synthetic":false,"types":["rayon::collections::hash_map::Iter"]},{"text":"impl&lt;'a, T:&nbsp;Hash + Eq + Sync&gt; Clone for <a class=\"struct\" href=\"rayon/collections/hash_set/struct.Iter.html\" title=\"struct rayon::collections::hash_set::Iter\">Iter</a>&lt;'a, T&gt;","synthetic":false,"types":["rayon::collections::hash_set::Iter"]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for <a class=\"struct\" href=\"rayon/collections/linked_list/struct.IntoIter.html\" title=\"struct rayon::collections::linked_list::IntoIter\">IntoIter</a>&lt;T&gt;","synthetic":false,"types":["rayon::collections::linked_list::IntoIter"]},{"text":"impl&lt;'a, T:&nbsp;Sync&gt; Clone for <a class=\"struct\" href=\"rayon/collections/linked_list/struct.Iter.html\" title=\"struct rayon::collections::linked_list::Iter\">Iter</a>&lt;'a, T&gt;","synthetic":false,"types":["rayon::collections::linked_list::Iter"]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for <a class=\"struct\" href=\"rayon/collections/vec_deque/struct.IntoIter.html\" title=\"struct rayon::collections::vec_deque::IntoIter\">IntoIter</a>&lt;T&gt;","synthetic":false,"types":["rayon::collections::vec_deque::IntoIter"]},{"text":"impl&lt;'a, T:&nbsp;Sync&gt; Clone for <a class=\"struct\" href=\"rayon/collections/vec_deque/struct.Iter.html\" title=\"struct rayon::collections::vec_deque::Iter\">Iter</a>&lt;'a, T&gt;","synthetic":false,"types":["rayon::collections::vec_deque::Iter"]},{"text":"impl&lt;A:&nbsp;Clone, B:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.Chain.html\" title=\"struct rayon::iter::Chain\">Chain</a>&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: <a class=\"trait\" href=\"rayon/iter/trait.ParallelIterator.html\" title=\"trait rayon::iter::ParallelIterator\">ParallelIterator</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: <a class=\"trait\" href=\"rayon/iter/trait.ParallelIterator.html\" title=\"trait rayon::iter::ParallelIterator\">ParallelIterator</a>&lt;Item = A::<a class=\"type\" href=\"rayon/iter/trait.ParallelIterator.html#associatedtype.Item\" title=\"type rayon::iter::ParallelIterator::Item\">Item</a>&gt;,&nbsp;</span>","synthetic":false,"types":["rayon::iter::chain::Chain"]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.Chunks.html\" title=\"struct rayon::iter::Chunks\">Chunks</a>&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: <a class=\"trait\" href=\"rayon/iter/trait.IndexedParallelIterator.html\" title=\"trait rayon::iter::IndexedParallelIterator\">IndexedParallelIterator</a>,&nbsp;</span>","synthetic":false,"types":["rayon::iter::chunks::Chunks"]},{"text":"impl&lt;I:&nbsp;Clone + <a class=\"trait\" href=\"rayon/iter/trait.ParallelIterator.html\" title=\"trait rayon::iter::ParallelIterator\">ParallelIterator</a>&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.Cloned.html\" title=\"struct rayon::iter::Cloned\">Cloned</a>&lt;I&gt;","synthetic":false,"types":["rayon::iter::cloned::Cloned"]},{"text":"impl&lt;I:&nbsp;Clone + <a class=\"trait\" href=\"rayon/iter/trait.ParallelIterator.html\" title=\"trait rayon::iter::ParallelIterator\">ParallelIterator</a>&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.Copied.html\" title=\"struct rayon::iter::Copied\">Copied</a>&lt;I&gt;","synthetic":false,"types":["rayon::iter::copied::Copied"]},{"text":"impl&lt;T:&nbsp;Send&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.Empty.html\" title=\"struct rayon::iter::Empty\">Empty</a>&lt;T&gt;","synthetic":false,"types":["rayon::iter::empty::Empty"]},{"text":"impl&lt;I:&nbsp;Clone + <a class=\"trait\" href=\"rayon/iter/trait.IndexedParallelIterator.html\" title=\"trait rayon::iter::IndexedParallelIterator\">IndexedParallelIterator</a>&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.Enumerate.html\" title=\"struct rayon::iter::Enumerate\">Enumerate</a>&lt;I&gt;","synthetic":false,"types":["rayon::iter::enumerate::Enumerate"]},{"text":"impl&lt;I:&nbsp;Clone + <a class=\"trait\" href=\"rayon/iter/trait.ParallelIterator.html\" title=\"trait rayon::iter::ParallelIterator\">ParallelIterator</a>, P:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.Filter.html\" title=\"struct rayon::iter::Filter\">Filter</a>&lt;I, P&gt;","synthetic":false,"types":["rayon::iter::filter::Filter"]},{"text":"impl&lt;I:&nbsp;Clone + <a class=\"trait\" href=\"rayon/iter/trait.ParallelIterator.html\" title=\"trait rayon::iter::ParallelIterator\">ParallelIterator</a>, P:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.FilterMap.html\" title=\"struct rayon::iter::FilterMap\">FilterMap</a>&lt;I, P&gt;","synthetic":false,"types":["rayon::iter::filter_map::FilterMap"]},{"text":"impl&lt;I:&nbsp;Clone + <a class=\"trait\" href=\"rayon/iter/trait.ParallelIterator.html\" title=\"trait rayon::iter::ParallelIterator\">ParallelIterator</a>, F:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.FlatMap.html\" title=\"struct rayon::iter::FlatMap\">FlatMap</a>&lt;I, F&gt;","synthetic":false,"types":["rayon::iter::flat_map::FlatMap"]},{"text":"impl&lt;I:&nbsp;Clone + <a class=\"trait\" href=\"rayon/iter/trait.ParallelIterator.html\" title=\"trait rayon::iter::ParallelIterator\">ParallelIterator</a>, F:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.FlatMapIter.html\" title=\"struct rayon::iter::FlatMapIter\">FlatMapIter</a>&lt;I, F&gt;","synthetic":false,"types":["rayon::iter::flat_map_iter::FlatMapIter"]},{"text":"impl&lt;I:&nbsp;Clone + <a class=\"trait\" href=\"rayon/iter/trait.ParallelIterator.html\" title=\"trait rayon::iter::ParallelIterator\">ParallelIterator</a>&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.Flatten.html\" title=\"struct rayon::iter::Flatten\">Flatten</a>&lt;I&gt;","synthetic":false,"types":["rayon::iter::flatten::Flatten"]},{"text":"impl&lt;I:&nbsp;Clone + <a class=\"trait\" href=\"rayon/iter/trait.ParallelIterator.html\" title=\"trait rayon::iter::ParallelIterator\">ParallelIterator</a>&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.FlattenIter.html\" title=\"struct rayon::iter::FlattenIter\">FlattenIter</a>&lt;I&gt;","synthetic":false,"types":["rayon::iter::flatten_iter::FlattenIter"]},{"text":"impl&lt;I:&nbsp;Clone, ID:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.Fold.html\" title=\"struct rayon::iter::Fold\">Fold</a>&lt;I, ID, F&gt;","synthetic":false,"types":["rayon::iter::fold::Fold"]},{"text":"impl&lt;I:&nbsp;Clone, U:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.FoldWith.html\" title=\"struct rayon::iter::FoldWith\">FoldWith</a>&lt;I, U, F&gt;","synthetic":false,"types":["rayon::iter::fold::FoldWith"]},{"text":"impl&lt;I:&nbsp;Clone + <a class=\"trait\" href=\"rayon/iter/trait.ParallelIterator.html\" title=\"trait rayon::iter::ParallelIterator\">ParallelIterator</a>, F:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.Inspect.html\" title=\"struct rayon::iter::Inspect\">Inspect</a>&lt;I, F&gt;","synthetic":false,"types":["rayon::iter::inspect::Inspect"]},{"text":"impl&lt;I:&nbsp;Clone, J:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.Interleave.html\" title=\"struct rayon::iter::Interleave\">Interleave</a>&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: <a class=\"trait\" href=\"rayon/iter/trait.IndexedParallelIterator.html\" title=\"trait rayon::iter::IndexedParallelIterator\">IndexedParallelIterator</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: <a class=\"trait\" href=\"rayon/iter/trait.IndexedParallelIterator.html\" title=\"trait rayon::iter::IndexedParallelIterator\">IndexedParallelIterator</a>&lt;Item = I::<a class=\"type\" href=\"rayon/iter/trait.ParallelIterator.html#associatedtype.Item\" title=\"type rayon::iter::ParallelIterator::Item\">Item</a>&gt;,&nbsp;</span>","synthetic":false,"types":["rayon::iter::interleave::Interleave"]},{"text":"impl&lt;I:&nbsp;Clone, J:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.InterleaveShortest.html\" title=\"struct rayon::iter::InterleaveShortest\">InterleaveShortest</a>&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: <a class=\"trait\" href=\"rayon/iter/trait.IndexedParallelIterator.html\" title=\"trait rayon::iter::IndexedParallelIterator\">IndexedParallelIterator</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: <a class=\"trait\" href=\"rayon/iter/trait.IndexedParallelIterator.html\" title=\"trait rayon::iter::IndexedParallelIterator\">IndexedParallelIterator</a>&lt;Item = I::<a class=\"type\" href=\"rayon/iter/trait.ParallelIterator.html#associatedtype.Item\" title=\"type rayon::iter::ParallelIterator::Item\">Item</a>&gt;,&nbsp;</span>","synthetic":false,"types":["rayon::iter::interleave_shortest::InterleaveShortest"]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.Intersperse.html\" title=\"struct rayon::iter::Intersperse\">Intersperse</a>&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: <a class=\"trait\" href=\"rayon/iter/trait.ParallelIterator.html\" title=\"trait rayon::iter::ParallelIterator\">ParallelIterator</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::<a class=\"type\" href=\"rayon/iter/trait.ParallelIterator.html#associatedtype.Item\" title=\"type rayon::iter::ParallelIterator::Item\">Item</a>: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::<a class=\"type\" href=\"rayon/iter/trait.ParallelIterator.html#associatedtype.Item\" title=\"type rayon::iter::ParallelIterator::Item\">Item</a>: Clone,&nbsp;</span>","synthetic":false,"types":["rayon::iter::intersperse::Intersperse"]},{"text":"impl&lt;I:&nbsp;Clone + <a class=\"trait\" href=\"rayon/iter/trait.IndexedParallelIterator.html\" title=\"trait rayon::iter::IndexedParallelIterator\">IndexedParallelIterator</a>&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.MinLen.html\" title=\"struct rayon::iter::MinLen\">MinLen</a>&lt;I&gt;","synthetic":false,"types":["rayon::iter::len::MinLen"]},{"text":"impl&lt;I:&nbsp;Clone + <a class=\"trait\" href=\"rayon/iter/trait.IndexedParallelIterator.html\" title=\"trait rayon::iter::IndexedParallelIterator\">IndexedParallelIterator</a>&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.MaxLen.html\" title=\"struct rayon::iter::MaxLen\">MaxLen</a>&lt;I&gt;","synthetic":false,"types":["rayon::iter::len::MaxLen"]},{"text":"impl&lt;I:&nbsp;Clone + <a class=\"trait\" href=\"rayon/iter/trait.ParallelIterator.html\" title=\"trait rayon::iter::ParallelIterator\">ParallelIterator</a>, F:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.Map.html\" title=\"struct rayon::iter::Map\">Map</a>&lt;I, F&gt;","synthetic":false,"types":["rayon::iter::map::Map"]},{"text":"impl&lt;I:&nbsp;Clone + <a class=\"trait\" href=\"rayon/iter/trait.ParallelIterator.html\" title=\"trait rayon::iter::ParallelIterator\">ParallelIterator</a>, T:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.MapWith.html\" title=\"struct rayon::iter::MapWith\">MapWith</a>&lt;I, T, F&gt;","synthetic":false,"types":["rayon::iter::map_with::MapWith"]},{"text":"impl&lt;I:&nbsp;Clone + <a class=\"trait\" href=\"rayon/iter/trait.ParallelIterator.html\" title=\"trait rayon::iter::ParallelIterator\">ParallelIterator</a>, INIT:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.MapInit.html\" title=\"struct rayon::iter::MapInit\">MapInit</a>&lt;I, INIT, F&gt;","synthetic":false,"types":["rayon::iter::map_with::MapInit"]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.MultiZip.html\" title=\"struct rayon::iter::MultiZip\">MultiZip</a>&lt;T&gt;","synthetic":false,"types":["rayon::iter::multizip::MultiZip"]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.Once.html\" title=\"struct rayon::iter::Once\">Once</a>&lt;T&gt;","synthetic":false,"types":["rayon::iter::once::Once"]},{"text":"impl&lt;I:&nbsp;Clone + <a class=\"trait\" href=\"rayon/iter/trait.ParallelIterator.html\" title=\"trait rayon::iter::ParallelIterator\">ParallelIterator</a>&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.PanicFuse.html\" title=\"struct rayon::iter::PanicFuse\">PanicFuse</a>&lt;I&gt;","synthetic":false,"types":["rayon::iter::panic_fuse::PanicFuse"]},{"text":"impl&lt;Iter:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.IterBridge.html\" title=\"struct rayon::iter::IterBridge\">IterBridge</a>&lt;Iter&gt;","synthetic":false,"types":["rayon::iter::par_bridge::IterBridge"]},{"text":"impl&lt;I:&nbsp;Clone + <a class=\"trait\" href=\"rayon/iter/trait.IndexedParallelIterator.html\" title=\"trait rayon::iter::IndexedParallelIterator\">IndexedParallelIterator</a>, P:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.Positions.html\" title=\"struct rayon::iter::Positions\">Positions</a>&lt;I, P&gt;","synthetic":false,"types":["rayon::iter::positions::Positions"]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.Repeat.html\" title=\"struct rayon::iter::Repeat\">Repeat</a>&lt;T&gt;","synthetic":false,"types":["rayon::iter::repeat::Repeat"]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.RepeatN.html\" title=\"struct rayon::iter::RepeatN\">RepeatN</a>&lt;T&gt;","synthetic":false,"types":["rayon::iter::repeat::RepeatN"]},{"text":"impl&lt;I:&nbsp;Clone + <a class=\"trait\" href=\"rayon/iter/trait.IndexedParallelIterator.html\" title=\"trait rayon::iter::IndexedParallelIterator\">IndexedParallelIterator</a>&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.Rev.html\" title=\"struct rayon::iter::Rev\">Rev</a>&lt;I&gt;","synthetic":false,"types":["rayon::iter::rev::Rev"]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.Skip.html\" title=\"struct rayon::iter::Skip\">Skip</a>&lt;I&gt;","synthetic":false,"types":["rayon::iter::skip::Skip"]},{"text":"impl&lt;D:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.Split.html\" title=\"struct rayon::iter::Split\">Split</a>&lt;D, S&gt;","synthetic":false,"types":["rayon::iter::splitter::Split"]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.Take.html\" title=\"struct rayon::iter::Take\">Take</a>&lt;I&gt;","synthetic":false,"types":["rayon::iter::take::Take"]},{"text":"impl&lt;I:&nbsp;Clone, U:&nbsp;Clone, ID:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.TryFold.html\" title=\"struct rayon::iter::TryFold\">TryFold</a>&lt;I, U, ID, F&gt;","synthetic":false,"types":["rayon::iter::try_fold::TryFold"]},{"text":"impl&lt;I:&nbsp;Clone, U:&nbsp;Clone + Try, F:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.TryFoldWith.html\" title=\"struct rayon::iter::TryFoldWith\">TryFoldWith</a>&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U::Ok: Clone,&nbsp;</span>","synthetic":false,"types":["rayon::iter::try_fold::TryFoldWith"]},{"text":"impl&lt;I:&nbsp;Clone + <a class=\"trait\" href=\"rayon/iter/trait.ParallelIterator.html\" title=\"trait rayon::iter::ParallelIterator\">ParallelIterator</a>, F:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.Update.html\" title=\"struct rayon::iter::Update\">Update</a>&lt;I, F&gt;","synthetic":false,"types":["rayon::iter::update::Update"]},{"text":"impl&lt;I:&nbsp;Clone + <a class=\"trait\" href=\"rayon/iter/trait.ParallelIterator.html\" title=\"trait rayon::iter::ParallelIterator\">ParallelIterator</a>&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.WhileSome.html\" title=\"struct rayon::iter::WhileSome\">WhileSome</a>&lt;I&gt;","synthetic":false,"types":["rayon::iter::while_some::WhileSome"]},{"text":"impl&lt;A:&nbsp;Clone + <a class=\"trait\" href=\"rayon/iter/trait.IndexedParallelIterator.html\" title=\"trait rayon::iter::IndexedParallelIterator\">IndexedParallelIterator</a>, B:&nbsp;Clone + <a class=\"trait\" href=\"rayon/iter/trait.IndexedParallelIterator.html\" title=\"trait rayon::iter::IndexedParallelIterator\">IndexedParallelIterator</a>&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.Zip.html\" title=\"struct rayon::iter::Zip\">Zip</a>&lt;A, B&gt;","synthetic":false,"types":["rayon::iter::zip::Zip"]},{"text":"impl&lt;A:&nbsp;Clone + <a class=\"trait\" href=\"rayon/iter/trait.IndexedParallelIterator.html\" title=\"trait rayon::iter::IndexedParallelIterator\">IndexedParallelIterator</a>, B:&nbsp;Clone + <a class=\"trait\" href=\"rayon/iter/trait.IndexedParallelIterator.html\" title=\"trait rayon::iter::IndexedParallelIterator\">IndexedParallelIterator</a>&gt; Clone for <a class=\"struct\" href=\"rayon/iter/struct.ZipEq.html\" title=\"struct rayon::iter::ZipEq\">ZipEq</a>&lt;A, B&gt;","synthetic":false,"types":["rayon::iter::zip_eq::ZipEq"]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for <a class=\"struct\" href=\"rayon/option/struct.IntoIter.html\" title=\"struct rayon::option::IntoIter\">IntoIter</a>&lt;T&gt;","synthetic":false,"types":["rayon::option::IntoIter"]},{"text":"impl&lt;'a, T:&nbsp;Sync&gt; Clone for <a class=\"struct\" href=\"rayon/option/struct.Iter.html\" title=\"struct rayon::option::Iter\">Iter</a>&lt;'a, T&gt;","synthetic":false,"types":["rayon::option::Iter"]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"rayon/range/struct.Iter.html\" title=\"struct rayon::range::Iter\">Iter</a>&lt;T&gt;","synthetic":false,"types":["rayon::range::Iter"]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"rayon/range_inclusive/struct.Iter.html\" title=\"struct rayon::range_inclusive::Iter\">Iter</a>&lt;T&gt;","synthetic":false,"types":["rayon::range_inclusive::Iter"]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for <a class=\"struct\" href=\"rayon/result/struct.IntoIter.html\" title=\"struct rayon::result::IntoIter\">IntoIter</a>&lt;T&gt;","synthetic":false,"types":["rayon::result::IntoIter"]},{"text":"impl&lt;'a, T:&nbsp;Sync&gt; Clone for <a class=\"struct\" href=\"rayon/result/struct.Iter.html\" title=\"struct rayon::result::Iter\">Iter</a>&lt;'a, T&gt;","synthetic":false,"types":["rayon::result::Iter"]},{"text":"impl&lt;'data, T:&nbsp;Sync&gt; Clone for <a class=\"struct\" href=\"rayon/slice/struct.Iter.html\" title=\"struct rayon::slice::Iter\">Iter</a>&lt;'data, T&gt;","synthetic":false,"types":["rayon::slice::Iter"]},{"text":"impl&lt;'data, T:&nbsp;Sync&gt; Clone for <a class=\"struct\" href=\"rayon/slice/struct.Chunks.html\" title=\"struct rayon::slice::Chunks\">Chunks</a>&lt;'data, T&gt;","synthetic":false,"types":["rayon::slice::Chunks"]},{"text":"impl&lt;'data, T:&nbsp;Sync&gt; Clone for <a class=\"struct\" href=\"rayon/slice/struct.ChunksExact.html\" title=\"struct rayon::slice::ChunksExact\">ChunksExact</a>&lt;'data, T&gt;","synthetic":false,"types":["rayon::slice::ChunksExact"]},{"text":"impl&lt;'data, T:&nbsp;Sync&gt; Clone for <a class=\"struct\" href=\"rayon/slice/struct.Windows.html\" title=\"struct rayon::slice::Windows\">Windows</a>&lt;'data, T&gt;","synthetic":false,"types":["rayon::slice::Windows"]},{"text":"impl&lt;'data, T, P:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"rayon/slice/struct.Split.html\" title=\"struct rayon::slice::Split\">Split</a>&lt;'data, T, P&gt;","synthetic":false,"types":["rayon::slice::Split"]},{"text":"impl&lt;'ch&gt; Clone for <a class=\"struct\" href=\"rayon/str/struct.Chars.html\" title=\"struct rayon::str::Chars\">Chars</a>&lt;'ch&gt;","synthetic":false,"types":["rayon::str::Chars"]},{"text":"impl&lt;'ch&gt; Clone for <a class=\"struct\" href=\"rayon/str/struct.CharIndices.html\" title=\"struct rayon::str::CharIndices\">CharIndices</a>&lt;'ch&gt;","synthetic":false,"types":["rayon::str::CharIndices"]},{"text":"impl&lt;'ch&gt; Clone for <a class=\"struct\" href=\"rayon/str/struct.Bytes.html\" title=\"struct rayon::str::Bytes\">Bytes</a>&lt;'ch&gt;","synthetic":false,"types":["rayon::str::Bytes"]},{"text":"impl&lt;'ch&gt; Clone for <a class=\"struct\" href=\"rayon/str/struct.EncodeUtf16.html\" title=\"struct rayon::str::EncodeUtf16\">EncodeUtf16</a>&lt;'ch&gt;","synthetic":false,"types":["rayon::str::EncodeUtf16"]},{"text":"impl&lt;'ch, P:&nbsp;Clone + Pattern&gt; Clone for <a class=\"struct\" href=\"rayon/str/struct.Split.html\" title=\"struct rayon::str::Split\">Split</a>&lt;'ch, P&gt;","synthetic":false,"types":["rayon::str::Split"]},{"text":"impl&lt;'ch, P:&nbsp;Clone + Pattern&gt; Clone for <a class=\"struct\" href=\"rayon/str/struct.SplitTerminator.html\" title=\"struct rayon::str::SplitTerminator\">SplitTerminator</a>&lt;'ch, P&gt;","synthetic":false,"types":["rayon::str::SplitTerminator"]},{"text":"impl&lt;'ch&gt; Clone for <a class=\"struct\" href=\"rayon/str/struct.Lines.html\" title=\"struct rayon::str::Lines\">Lines</a>&lt;'ch&gt;","synthetic":false,"types":["rayon::str::Lines"]},{"text":"impl&lt;'ch&gt; Clone for <a class=\"struct\" href=\"rayon/str/struct.SplitWhitespace.html\" title=\"struct rayon::str::SplitWhitespace\">SplitWhitespace</a>&lt;'ch&gt;","synthetic":false,"types":["rayon::str::SplitWhitespace"]},{"text":"impl&lt;'ch, P:&nbsp;Clone + Pattern&gt; Clone for <a class=\"struct\" href=\"rayon/str/struct.Matches.html\" title=\"struct rayon::str::Matches\">Matches</a>&lt;'ch, P&gt;","synthetic":false,"types":["rayon::str::Matches"]},{"text":"impl&lt;'ch, P:&nbsp;Clone + Pattern&gt; Clone for <a class=\"struct\" href=\"rayon/str/struct.MatchIndices.html\" title=\"struct rayon::str::MatchIndices\">MatchIndices</a>&lt;'ch, P&gt;","synthetic":false,"types":["rayon::str::MatchIndices"]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for <a class=\"struct\" href=\"rayon/vec/struct.IntoIter.html\" title=\"struct rayon::vec::IntoIter\">IntoIter</a>&lt;T&gt;","synthetic":false,"types":["rayon::vec::IntoIter"]}];
implementors["smoltcp"] = [{"text":"impl&lt;H:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"smoltcp/storage/struct.PacketMetadata.html\" title=\"struct smoltcp::storage::PacketMetadata\">PacketMetadata</a>&lt;H&gt;","synthetic":false,"types":["smoltcp::storage::packet_buffer::PacketMetadata"]},{"text":"impl Clone for <a class=\"enum\" href=\"smoltcp/phy/enum.PcapLinkType.html\" title=\"enum smoltcp::phy::PcapLinkType\">PcapLinkType</a>","synthetic":false,"types":["smoltcp::phy::pcap_writer::PcapLinkType"]},{"text":"impl Clone for <a class=\"enum\" href=\"smoltcp/phy/enum.PcapMode.html\" title=\"enum smoltcp::phy::PcapMode\">PcapMode</a>","synthetic":false,"types":["smoltcp::phy::pcap_writer::PcapMode"]},{"text":"impl Clone for <a class=\"enum\" href=\"smoltcp/phy/enum.Checksum.html\" title=\"enum smoltcp::phy::Checksum\">Checksum</a>","synthetic":false,"types":["smoltcp::phy::Checksum"]},{"text":"impl Clone for <a class=\"struct\" href=\"smoltcp/phy/struct.ChecksumCapabilities.html\" title=\"struct smoltcp::phy::ChecksumCapabilities\">ChecksumCapabilities</a>","synthetic":false,"types":["smoltcp::phy::ChecksumCapabilities"]},{"text":"impl Clone for <a class=\"struct\" href=\"smoltcp/phy/struct.DeviceCapabilities.html\" title=\"struct smoltcp::phy::DeviceCapabilities\">DeviceCapabilities</a>","synthetic":false,"types":["smoltcp::phy::DeviceCapabilities"]},{"text":"impl Clone for <a class=\"enum\" href=\"smoltcp/wire/enum.EthernetProtocol.html\" title=\"enum smoltcp::wire::EthernetProtocol\">EtherType</a>","synthetic":false,"types":["smoltcp::wire::ethernet::EtherType"]},{"text":"impl Clone for <a class=\"struct\" href=\"smoltcp/wire/struct.EthernetAddress.html\" title=\"struct smoltcp::wire::EthernetAddress\">Address</a>","synthetic":false,"types":["smoltcp::wire::ethernet::Address"]},{"text":"impl&lt;T:&nbsp;Clone + AsRef&lt;[u8]&gt;&gt; Clone for <a class=\"struct\" href=\"smoltcp/wire/struct.EthernetFrame.html\" title=\"struct smoltcp::wire::EthernetFrame\">Frame</a>&lt;T&gt;","synthetic":false,"types":["smoltcp::wire::ethernet::Frame"]},{"text":"impl Clone for <a class=\"struct\" href=\"smoltcp/wire/struct.EthernetRepr.html\" title=\"struct smoltcp::wire::EthernetRepr\">Repr</a>","synthetic":false,"types":["smoltcp::wire::ethernet::Repr"]},{"text":"impl Clone for <a class=\"enum\" href=\"smoltcp/wire/enum.ArpHardware.html\" title=\"enum smoltcp::wire::ArpHardware\">Hardware</a>","synthetic":false,"types":["smoltcp::wire::arp::Hardware"]},{"text":"impl Clone for <a class=\"enum\" href=\"smoltcp/wire/enum.ArpOperation.html\" title=\"enum smoltcp::wire::ArpOperation\">Operation</a>","synthetic":false,"types":["smoltcp::wire::arp::Operation"]},{"text":"impl&lt;T:&nbsp;Clone + AsRef&lt;[u8]&gt;&gt; Clone for <a class=\"struct\" href=\"smoltcp/wire/struct.ArpPacket.html\" title=\"struct smoltcp::wire::ArpPacket\">Packet</a>&lt;T&gt;","synthetic":false,"types":["smoltcp::wire::arp::Packet"]},{"text":"impl Clone for <a class=\"enum\" href=\"smoltcp/wire/enum.ArpRepr.html\" title=\"enum smoltcp::wire::ArpRepr\">Repr</a>","synthetic":false,"types":["smoltcp::wire::arp::Repr"]},{"text":"impl Clone for <a class=\"enum\" href=\"smoltcp/wire/enum.IpVersion.html\" title=\"enum smoltcp::wire::IpVersion\">Version</a>","synthetic":false,"types":["smoltcp::wire::ip::Version"]},{"text":"impl Clone for <a class=\"enum\" href=\"smoltcp/wire/enum.IpProtocol.html\" title=\"enum smoltcp::wire::IpProtocol\">Protocol</a>","synthetic":false,"types":["smoltcp::wire::ip::Protocol"]},{"text":"impl Clone for <a class=\"enum\" href=\"smoltcp/wire/enum.IpAddress.html\" title=\"enum smoltcp::wire::IpAddress\">Address</a>","synthetic":false,"types":["smoltcp::wire::ip::Address"]},{"text":"impl Clone for <a class=\"enum\" href=\"smoltcp/wire/enum.IpCidr.html\" title=\"enum smoltcp::wire::IpCidr\">Cidr</a>","synthetic":false,"types":["smoltcp::wire::ip::Cidr"]},{"text":"impl Clone for <a class=\"struct\" href=\"smoltcp/wire/struct.IpEndpoint.html\" title=\"struct smoltcp::wire::IpEndpoint\">Endpoint</a>","synthetic":false,"types":["smoltcp::wire::ip::Endpoint"]},{"text":"impl Clone for <a class=\"enum\" href=\"smoltcp/wire/enum.IpRepr.html\" title=\"enum smoltcp::wire::IpRepr\">Repr</a>","synthetic":false,"types":["smoltcp::wire::ip::Repr"]},{"text":"impl Clone for <a class=\"struct\" href=\"smoltcp/wire/struct.Ipv4Address.html\" title=\"struct smoltcp::wire::Ipv4Address\">Address</a>","synthetic":false,"types":["smoltcp::wire::ipv4::Address"]},{"text":"impl Clone for <a class=\"struct\" href=\"smoltcp/wire/struct.Ipv4Cidr.html\" title=\"struct smoltcp::wire::Ipv4Cidr\">Cidr</a>","synthetic":false,"types":["smoltcp::wire::ipv4::Cidr"]},{"text":"impl&lt;T:&nbsp;Clone + AsRef&lt;[u8]&gt;&gt; Clone for <a class=\"struct\" href=\"smoltcp/wire/struct.Ipv4Packet.html\" title=\"struct smoltcp::wire::Ipv4Packet\">Packet</a>&lt;T&gt;","synthetic":false,"types":["smoltcp::wire::ipv4::Packet"]},{"text":"impl Clone for <a class=\"struct\" href=\"smoltcp/wire/struct.Ipv4Repr.html\" title=\"struct smoltcp::wire::Ipv4Repr\">Repr</a>","synthetic":false,"types":["smoltcp::wire::ipv4::Repr"]},{"text":"impl Clone for <a class=\"struct\" href=\"smoltcp/wire/struct.Ipv6Address.html\" title=\"struct smoltcp::wire::Ipv6Address\">Address</a>","synthetic":false,"types":["smoltcp::wire::ipv6::Address"]},{"text":"impl Clone for <a class=\"struct\" href=\"smoltcp/wire/struct.Ipv6Cidr.html\" title=\"struct smoltcp::wire::Ipv6Cidr\">Cidr</a>","synthetic":false,"types":["smoltcp::wire::ipv6::Cidr"]},{"text":"impl&lt;T:&nbsp;Clone + AsRef&lt;[u8]&gt;&gt; Clone for <a class=\"struct\" href=\"smoltcp/wire/struct.Ipv6Packet.html\" title=\"struct smoltcp::wire::Ipv6Packet\">Packet</a>&lt;T&gt;","synthetic":false,"types":["smoltcp::wire::ipv6::Packet"]},{"text":"impl Clone for <a class=\"struct\" href=\"smoltcp/wire/struct.Ipv6Repr.html\" title=\"struct smoltcp::wire::Ipv6Repr\">Repr</a>","synthetic":false,"types":["smoltcp::wire::ipv6::Repr"]},{"text":"impl Clone for <a class=\"enum\" href=\"smoltcp/wire/enum.Ipv6OptionType.html\" title=\"enum smoltcp::wire::Ipv6OptionType\">Type</a>","synthetic":false,"types":["smoltcp::wire::ipv6option::Type"]},{"text":"impl Clone for <a class=\"enum\" href=\"smoltcp/wire/enum.Ipv6OptionFailureType.html\" title=\"enum smoltcp::wire::Ipv6OptionFailureType\">FailureType</a>","synthetic":false,"types":["smoltcp::wire::ipv6option::FailureType"]},{"text":"impl&lt;'a&gt; Clone for <a class=\"enum\" href=\"smoltcp/wire/enum.Ipv6OptionRepr.html\" title=\"enum smoltcp::wire::Ipv6OptionRepr\">Repr</a>&lt;'a&gt;","synthetic":false,"types":["smoltcp::wire::ipv6option::Repr"]},{"text":"impl&lt;'a&gt; Clone for <a class=\"struct\" href=\"smoltcp/wire/struct.Ipv6HopByHopRepr.html\" title=\"struct smoltcp::wire::Ipv6HopByHopRepr\">Repr</a>&lt;'a&gt;","synthetic":false,"types":["smoltcp::wire::ipv6hopbyhop::Repr"]},{"text":"impl Clone for <a class=\"struct\" href=\"smoltcp/wire/struct.Ipv6FragmentRepr.html\" title=\"struct smoltcp::wire::Ipv6FragmentRepr\">Repr</a>","synthetic":false,"types":["smoltcp::wire::ipv6fragment::Repr"]},{"text":"impl&lt;'a&gt; Clone for <a class=\"enum\" href=\"smoltcp/wire/enum.Ipv6RoutingRepr.html\" title=\"enum smoltcp::wire::Ipv6RoutingRepr\">Repr</a>&lt;'a&gt;","synthetic":false,"types":["smoltcp::wire::ipv6routing::Repr"]},{"text":"impl Clone for <a class=\"enum\" href=\"smoltcp/wire/enum.Icmpv4Message.html\" title=\"enum smoltcp::wire::Icmpv4Message\">Message</a>","synthetic":false,"types":["smoltcp::wire::icmpv4::Message"]},{"text":"impl Clone for <a class=\"enum\" href=\"smoltcp/wire/enum.Icmpv4DstUnreachable.html\" title=\"enum smoltcp::wire::Icmpv4DstUnreachable\">DstUnreachable</a>","synthetic":false,"types":["smoltcp::wire::icmpv4::DstUnreachable"]},{"text":"impl Clone for <a class=\"enum\" href=\"smoltcp/wire/enum.Icmpv4Redirect.html\" title=\"enum smoltcp::wire::Icmpv4Redirect\">Redirect</a>","synthetic":false,"types":["smoltcp::wire::icmpv4::Redirect"]},{"text":"impl Clone for <a class=\"enum\" href=\"smoltcp/wire/enum.Icmpv4TimeExceeded.html\" title=\"enum smoltcp::wire::Icmpv4TimeExceeded\">TimeExceeded</a>","synthetic":false,"types":["smoltcp::wire::icmpv4::TimeExceeded"]},{"text":"impl Clone for <a class=\"enum\" href=\"smoltcp/wire/enum.Icmpv4ParamProblem.html\" title=\"enum smoltcp::wire::Icmpv4ParamProblem\">ParamProblem</a>","synthetic":false,"types":["smoltcp::wire::icmpv4::ParamProblem"]},{"text":"impl&lt;T:&nbsp;Clone + AsRef&lt;[u8]&gt;&gt; Clone for <a class=\"struct\" href=\"smoltcp/wire/struct.Icmpv4Packet.html\" title=\"struct smoltcp::wire::Icmpv4Packet\">Packet</a>&lt;T&gt;","synthetic":false,"types":["smoltcp::wire::icmpv4::Packet"]},{"text":"impl&lt;'a&gt; Clone for <a class=\"enum\" href=\"smoltcp/wire/enum.Icmpv4Repr.html\" title=\"enum smoltcp::wire::Icmpv4Repr\">Repr</a>&lt;'a&gt;","synthetic":false,"types":["smoltcp::wire::icmpv4::Repr"]},{"text":"impl Clone for <a class=\"enum\" href=\"smoltcp/wire/enum.Icmpv6Message.html\" title=\"enum smoltcp::wire::Icmpv6Message\">Message</a>","synthetic":false,"types":["smoltcp::wire::icmpv6::Message"]},{"text":"impl Clone for <a class=\"enum\" href=\"smoltcp/wire/enum.Icmpv6DstUnreachable.html\" title=\"enum smoltcp::wire::Icmpv6DstUnreachable\">DstUnreachable</a>","synthetic":false,"types":["smoltcp::wire::icmpv6::DstUnreachable"]},{"text":"impl Clone for <a class=\"enum\" href=\"smoltcp/wire/enum.Icmpv6ParamProblem.html\" title=\"enum smoltcp::wire::Icmpv6ParamProblem\">ParamProblem</a>","synthetic":false,"types":["smoltcp::wire::icmpv6::ParamProblem"]},{"text":"impl Clone for <a class=\"enum\" href=\"smoltcp/wire/enum.Icmpv6TimeExceeded.html\" title=\"enum smoltcp::wire::Icmpv6TimeExceeded\">TimeExceeded</a>","synthetic":false,"types":["smoltcp::wire::icmpv6::TimeExceeded"]},{"text":"impl&lt;T:&nbsp;Clone + AsRef&lt;[u8]&gt;&gt; Clone for <a class=\"struct\" href=\"smoltcp/wire/struct.Icmpv6Packet.html\" title=\"struct smoltcp::wire::Icmpv6Packet\">Packet</a>&lt;T&gt;","synthetic":false,"types":["smoltcp::wire::icmpv6::Packet"]},{"text":"impl&lt;'a&gt; Clone for <a class=\"enum\" href=\"smoltcp/wire/enum.Icmpv6Repr.html\" title=\"enum smoltcp::wire::Icmpv6Repr\">Repr</a>&lt;'a&gt;","synthetic":false,"types":["smoltcp::wire::icmpv6::Repr"]},{"text":"impl&lt;'a&gt; Clone for <a class=\"enum\" href=\"smoltcp/wire/enum.IcmpRepr.html\" title=\"enum smoltcp::wire::IcmpRepr\">Repr</a>&lt;'a&gt;","synthetic":false,"types":["smoltcp::wire::icmp::Repr"]},{"text":"impl Clone for <a class=\"struct\" href=\"smoltcp/wire/struct.NdiscRouterFlags.html\" title=\"struct smoltcp::wire::NdiscRouterFlags\">RouterFlags</a>","synthetic":false,"types":["smoltcp::wire::ndisc::RouterFlags"]},{"text":"impl Clone for <a class=\"struct\" href=\"smoltcp/wire/struct.NdiscNeighborFlags.html\" title=\"struct smoltcp::wire::NdiscNeighborFlags\">NeighborFlags</a>","synthetic":false,"types":["smoltcp::wire::ndisc::NeighborFlags"]},{"text":"impl&lt;'a&gt; Clone for <a class=\"enum\" href=\"smoltcp/wire/enum.NdiscRepr.html\" title=\"enum smoltcp::wire::NdiscRepr\">Repr</a>&lt;'a&gt;","synthetic":false,"types":["smoltcp::wire::ndisc::Repr"]},{"text":"impl Clone for <a class=\"enum\" href=\"smoltcp/wire/enum.NdiscOptionType.html\" title=\"enum smoltcp::wire::NdiscOptionType\">Type</a>","synthetic":false,"types":["smoltcp::wire::ndiscoption::Type"]},{"text":"impl Clone for <a class=\"struct\" href=\"smoltcp/wire/struct.NdiscPrefixInfoFlags.html\" title=\"struct smoltcp::wire::NdiscPrefixInfoFlags\">PrefixInfoFlags</a>","synthetic":false,"types":["smoltcp::wire::ndiscoption::PrefixInfoFlags"]},{"text":"impl Clone for <a class=\"struct\" href=\"smoltcp/wire/struct.NdiscPrefixInformation.html\" title=\"struct smoltcp::wire::NdiscPrefixInformation\">PrefixInformation</a>","synthetic":false,"types":["smoltcp::wire::ndiscoption::PrefixInformation"]},{"text":"impl&lt;'a&gt; Clone for <a class=\"struct\" href=\"smoltcp/wire/struct.NdiscRedirectedHeader.html\" title=\"struct smoltcp::wire::NdiscRedirectedHeader\">RedirectedHeader</a>&lt;'a&gt;","synthetic":false,"types":["smoltcp::wire::ndiscoption::RedirectedHeader"]},{"text":"impl&lt;'a&gt; Clone for <a class=\"enum\" href=\"smoltcp/wire/enum.NdiscOptionRepr.html\" title=\"enum smoltcp::wire::NdiscOptionRepr\">Repr</a>&lt;'a&gt;","synthetic":false,"types":["smoltcp::wire::ndiscoption::Repr"]},{"text":"impl&lt;T:&nbsp;Clone + AsRef&lt;[u8]&gt;&gt; Clone for <a class=\"struct\" href=\"smoltcp/wire/struct.MldAddressRecord.html\" title=\"struct smoltcp::wire::MldAddressRecord\">AddressRecord</a>&lt;T&gt;","synthetic":false,"types":["smoltcp::wire::mld::AddressRecord"]},{"text":"impl&lt;'a&gt; Clone for <a class=\"enum\" href=\"smoltcp/wire/enum.MldRepr.html\" title=\"enum smoltcp::wire::MldRepr\">Repr</a>&lt;'a&gt;","synthetic":false,"types":["smoltcp::wire::mld::Repr"]},{"text":"impl&lt;T:&nbsp;Clone + AsRef&lt;[u8]&gt;&gt; Clone for <a class=\"struct\" href=\"smoltcp/wire/struct.UdpPacket.html\" title=\"struct smoltcp::wire::UdpPacket\">Packet</a>&lt;T&gt;","synthetic":false,"types":["smoltcp::wire::udp::Packet"]},{"text":"impl&lt;'a&gt; Clone for <a class=\"struct\" href=\"smoltcp/wire/struct.UdpRepr.html\" title=\"struct smoltcp::wire::UdpRepr\">Repr</a>&lt;'a&gt;","synthetic":false,"types":["smoltcp::wire::udp::Repr"]},{"text":"impl Clone for <a class=\"struct\" href=\"smoltcp/wire/struct.TcpSeqNumber.html\" title=\"struct smoltcp::wire::TcpSeqNumber\">SeqNumber</a>","synthetic":false,"types":["smoltcp::wire::tcp::SeqNumber"]},{"text":"impl&lt;T:&nbsp;Clone + AsRef&lt;[u8]&gt;&gt; Clone for <a class=\"struct\" href=\"smoltcp/wire/struct.TcpPacket.html\" title=\"struct smoltcp::wire::TcpPacket\">Packet</a>&lt;T&gt;","synthetic":false,"types":["smoltcp::wire::tcp::Packet"]},{"text":"impl&lt;'a&gt; Clone for <a class=\"enum\" href=\"smoltcp/wire/enum.TcpOption.html\" title=\"enum smoltcp::wire::TcpOption\">TcpOption</a>&lt;'a&gt;","synthetic":false,"types":["smoltcp::wire::tcp::TcpOption"]},{"text":"impl Clone for <a class=\"enum\" href=\"smoltcp/wire/enum.TcpControl.html\" title=\"enum smoltcp::wire::TcpControl\">Control</a>","synthetic":false,"types":["smoltcp::wire::tcp::Control"]},{"text":"impl&lt;'a&gt; Clone for <a class=\"struct\" href=\"smoltcp/wire/struct.TcpRepr.html\" title=\"struct smoltcp::wire::TcpRepr\">Repr</a>&lt;'a&gt;","synthetic":false,"types":["smoltcp::wire::tcp::Repr"]},{"text":"impl Clone for <a class=\"struct\" href=\"smoltcp/iface/struct.Neighbor.html\" title=\"struct smoltcp::iface::Neighbor\">Neighbor</a>","synthetic":false,"types":["smoltcp::iface::neighbor::Neighbor"]},{"text":"impl Clone for <a class=\"struct\" href=\"smoltcp/iface/struct.Route.html\" title=\"struct smoltcp::iface::Route\">Route</a>","synthetic":false,"types":["smoltcp::iface::route::Route"]},{"text":"impl Clone for <a class=\"enum\" href=\"smoltcp/socket/enum.TcpState.html\" title=\"enum smoltcp::socket::TcpState\">State</a>","synthetic":false,"types":["smoltcp::socket::tcp::State"]},{"text":"impl Clone for <a class=\"struct\" href=\"smoltcp/socket/struct.SocketHandle.html\" title=\"struct smoltcp::socket::SocketHandle\">Handle</a>","synthetic":false,"types":["smoltcp::socket::set::Handle"]},{"text":"impl Clone for <a class=\"struct\" href=\"smoltcp/time/struct.Instant.html\" title=\"struct smoltcp::time::Instant\">Instant</a>","synthetic":false,"types":["smoltcp::time::Instant"]},{"text":"impl Clone for <a class=\"struct\" href=\"smoltcp/time/struct.Duration.html\" title=\"struct smoltcp::time::Duration\">Duration</a>","synthetic":false,"types":["smoltcp::time::Duration"]},{"text":"impl Clone for <a class=\"enum\" href=\"smoltcp/enum.Error.html\" title=\"enum smoltcp::Error\">Error</a>","synthetic":false,"types":["smoltcp::Error"]}];
implementors["textwrap"] = [{"text":"impl Clone for <a class=\"struct\" href=\"textwrap/struct.NoHyphenation.html\" title=\"struct textwrap::NoHyphenation\">NoHyphenation</a>","synthetic":false,"types":["textwrap::splitting::NoHyphenation"]},{"text":"impl Clone for <a class=\"struct\" href=\"textwrap/struct.HyphenSplitter.html\" title=\"struct textwrap::HyphenSplitter\">HyphenSplitter</a>","synthetic":false,"types":["textwrap::splitting::HyphenSplitter"]},{"text":"impl&lt;'a, S:&nbsp;Clone + <a class=\"trait\" href=\"textwrap/trait.WordSplitter.html\" title=\"trait textwrap::WordSplitter\">WordSplitter</a>&gt; Clone for <a class=\"struct\" href=\"textwrap/struct.Wrapper.html\" title=\"struct textwrap::Wrapper\">Wrapper</a>&lt;'a, S&gt;","synthetic":false,"types":["textwrap::Wrapper"]}];
implementors["tiny_http"] = [{"text":"impl Clone for <a class=\"struct\" href=\"tiny_http/struct.StatusCode.html\" title=\"struct tiny_http::StatusCode\">StatusCode</a>","synthetic":false,"types":["tiny_http::common::StatusCode"]},{"text":"impl Clone for <a class=\"struct\" href=\"tiny_http/struct.Header.html\" title=\"struct tiny_http::Header\">Header</a>","synthetic":false,"types":["tiny_http::common::Header"]},{"text":"impl Clone for <a class=\"struct\" href=\"tiny_http/struct.HeaderField.html\" title=\"struct tiny_http::HeaderField\">HeaderField</a>","synthetic":false,"types":["tiny_http::common::HeaderField"]},{"text":"impl Clone for <a class=\"enum\" href=\"tiny_http/enum.Method.html\" title=\"enum tiny_http::Method\">Method</a>","synthetic":false,"types":["tiny_http::common::Method"]},{"text":"impl Clone for <a class=\"struct\" href=\"tiny_http/struct.HTTPVersion.html\" title=\"struct tiny_http::HTTPVersion\">HTTPVersion</a>","synthetic":false,"types":["tiny_http::common::HTTPVersion"]},{"text":"impl Clone for <a class=\"struct\" href=\"tiny_http/struct.Response.html\" title=\"struct tiny_http::Response\">Response</a>&lt;Empty&gt;","synthetic":false,"types":["tiny_http::response::Response"]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"tiny_http/struct.ServerConfig.html\" title=\"struct tiny_http::ServerConfig\">ServerConfig</a>&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: ToSocketAddrs,&nbsp;</span>","synthetic":false,"types":["tiny_http::ServerConfig"]},{"text":"impl Clone for <a class=\"struct\" href=\"tiny_http/struct.SslConfig.html\" title=\"struct tiny_http::SslConfig\">SslConfig</a>","synthetic":false,"types":["tiny_http::SslConfig"]}];
implementors["tinyvec"] = [{"text":"impl&lt;A&gt; Clone for <a class=\"struct\" href=\"tinyvec/struct.ArrayVec.html\" title=\"struct tinyvec::ArrayVec\">ArrayVec</a>&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: <a class=\"trait\" href=\"tinyvec/trait.Array.html\" title=\"trait tinyvec::Array\">Array</a> + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;A::<a class=\"type\" href=\"tinyvec/trait.Array.html#associatedtype.Item\" title=\"type tinyvec::Array::Item\">Item</a>: Clone,&nbsp;</span>","synthetic":false,"types":["tinyvec::arrayvec::ArrayVec"]},{"text":"impl Clone for <a class=\"struct\" href=\"tinyvec/struct.TryFromSliceError.html\" title=\"struct tinyvec::TryFromSliceError\">TryFromSliceError</a>","synthetic":false,"types":["tinyvec::arrayvec::TryFromSliceError"]},{"text":"impl&lt;A&gt; Clone for <a class=\"enum\" href=\"tinyvec/enum.TinyVec.html\" title=\"enum tinyvec::TinyVec\">TinyVec</a>&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: <a class=\"trait\" href=\"tinyvec/trait.Array.html\" title=\"trait tinyvec::Array\">Array</a> + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;A::<a class=\"type\" href=\"tinyvec/trait.Array.html#associatedtype.Item\" title=\"type tinyvec::Array::Item\">Item</a>: Clone,&nbsp;</span>","synthetic":false,"types":["tinyvec::tinyvec::TinyVec"]}];
implementors["unicode_bidi"] = [{"text":"impl Clone for <a class=\"struct\" href=\"unicode_bidi/level/struct.Level.html\" title=\"struct unicode_bidi::level::Level\">Level</a>","synthetic":false,"types":["unicode_bidi::level::Level"]},{"text":"impl Clone for <a class=\"enum\" href=\"unicode_bidi/enum.BidiClass.html\" title=\"enum unicode_bidi::BidiClass\">BidiClass</a>","synthetic":false,"types":["unicode_bidi::char_data::tables::BidiClass"]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"unicode_normalization/struct.Decompositions.html\" title=\"struct unicode_normalization::Decompositions\">Decompositions</a>&lt;I&gt;","synthetic":false,"types":["unicode_normalization::decompose::Decompositions"]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"unicode_normalization/struct.Recompositions.html\" title=\"struct unicode_normalization::Recompositions\">Recompositions</a>&lt;I&gt;","synthetic":false,"types":["unicode_normalization::recompose::Recompositions"]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"unicode_normalization/struct.Replacements.html\" title=\"struct unicode_normalization::Replacements\">Replacements</a>&lt;I&gt;","synthetic":false,"types":["unicode_normalization::replace::Replacements"]}];
implementors["url"] = [{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for <a class=\"enum\" href=\"url/enum.Host.html\" title=\"enum url::Host\">Host</a>&lt;S&gt;","synthetic":false,"types":["url::host::Host"]},{"text":"impl Clone for <a class=\"enum\" href=\"url/enum.Origin.html\" title=\"enum url::Origin\">Origin</a>","synthetic":false,"types":["url::origin::Origin"]},{"text":"impl Clone for <a class=\"struct\" href=\"url/struct.OpaqueOrigin.html\" title=\"struct url::OpaqueOrigin\">OpaqueOrigin</a>","synthetic":false,"types":["url::origin::OpaqueOrigin"]},{"text":"impl Clone for <a class=\"enum\" href=\"url/enum.ParseError.html\" title=\"enum url::ParseError\">ParseError</a>","synthetic":false,"types":["url::parser::ParseError"]},{"text":"impl Clone for <a class=\"enum\" href=\"url/enum.SyntaxViolation.html\" title=\"enum url::SyntaxViolation\">SyntaxViolation</a>","synthetic":false,"types":["url::parser::SyntaxViolation"]},{"text":"impl Clone for <a class=\"enum\" href=\"url/enum.Position.html\" title=\"enum url::Position\">Position</a>","synthetic":false,"types":["url::slicing::Position"]},{"text":"impl Clone for <a class=\"struct\" href=\"url/struct.Url.html\" title=\"struct url::Url\">Url</a>","synthetic":false,"types":["url::Url"]},{"text":"impl&lt;'a&gt; Clone for <a class=\"struct\" href=\"url/struct.ParseOptions.html\" title=\"struct url::ParseOptions\">ParseOptions</a>&lt;'a&gt;","synthetic":false,"types":["url::ParseOptions"]}];
implementors["vec_map"] = [{"text":"impl&lt;V:&nbsp;Clone&gt; Clone for <a class=\"struct\" href=\"vec_map/struct.VecMap.html\" title=\"struct vec_map::VecMap\">VecMap</a>&lt;V&gt;","synthetic":false,"types":["vec_map::VecMap"]},{"text":"impl&lt;'a, V&gt; Clone for <a class=\"struct\" href=\"vec_map/struct.Iter.html\" title=\"struct vec_map::Iter\">Iter</a>&lt;'a, V&gt;","synthetic":false,"types":["vec_map::Iter"]},{"text":"impl&lt;'a, V&gt; Clone for <a class=\"struct\" href=\"vec_map/struct.Keys.html\" title=\"struct vec_map::Keys\">Keys</a>&lt;'a, V&gt;","synthetic":false,"types":["vec_map::Keys"]},{"text":"impl&lt;'a, V&gt; Clone for <a class=\"struct\" href=\"vec_map/struct.Values.html\" title=\"struct vec_map::Values\">Values</a>&lt;'a, V&gt;","synthetic":false,"types":["vec_map::Values"]}];
implementors["x86"] = [{"text":"impl Clone for <a class=\"struct\" href=\"x86/bits32/eflags/struct.EFlags.html\" title=\"struct x86::bits32::eflags::EFlags\">EFlags</a>","synthetic":false,"types":["x86::bits32::eflags::EFlags"]},{"text":"impl Clone for <a class=\"struct\" href=\"x86/bits32/paging/struct.PAddr.html\" title=\"struct x86::bits32::paging::PAddr\">PAddr</a>","synthetic":false,"types":["x86::bits32::paging::PAddr"]},{"text":"impl Clone for <a class=\"struct\" href=\"x86/bits32/paging/struct.IOAddr.html\" title=\"struct x86::bits32::paging::IOAddr\">IOAddr</a>","synthetic":false,"types":["x86::bits32::paging::IOAddr"]},{"text":"impl Clone for <a class=\"struct\" href=\"x86/bits32/paging/struct.VAddr.html\" title=\"struct x86::bits32::paging::VAddr\">VAddr</a>","synthetic":false,"types":["x86::bits32::paging::VAddr"]},{"text":"impl Clone for <a class=\"struct\" href=\"x86/bits32/paging/struct.PDFlags.html\" title=\"struct x86::bits32::paging::PDFlags\">PDFlags</a>","synthetic":false,"types":["x86::bits32::paging::PDFlags"]},{"text":"impl Clone for <a class=\"struct\" href=\"x86/bits32/paging/struct.PDEntry.html\" title=\"struct x86::bits32::paging::PDEntry\">PDEntry</a>","synthetic":false,"types":["x86::bits32::paging::PDEntry"]},{"text":"impl Clone for <a class=\"struct\" href=\"x86/bits32/paging/struct.PTFlags.html\" title=\"struct x86::bits32::paging::PTFlags\">PTFlags</a>","synthetic":false,"types":["x86::bits32::paging::PTFlags"]},{"text":"impl Clone for <a class=\"struct\" href=\"x86/bits32/paging/struct.PTEntry.html\" title=\"struct x86::bits32::paging::PTEntry\">PTEntry</a>","synthetic":false,"types":["x86::bits32::paging::PTEntry"]},{"text":"impl Clone for <a class=\"struct\" href=\"x86/bits32/task/struct.TaskStateSegment.html\" title=\"struct x86::bits32::task::TaskStateSegment\">TaskStateSegment</a>","synthetic":false,"types":["x86::bits32::task::TaskStateSegment"]},{"text":"impl Clone for <a class=\"struct\" href=\"x86/bits64/paging/struct.PAddr.html\" title=\"struct x86::bits64::paging::PAddr\">PAddr</a>","synthetic":false,"types":["x86::bits64::paging::PAddr"]},{"text":"impl Clone for <a class=\"struct\" href=\"x86/bits64/paging/struct.IOAddr.html\" title=\"struct x86::bits64::paging::IOAddr\">IOAddr</a>","synthetic":false,"types":["x86::bits64::paging::IOAddr"]},{"text":"impl Clone for <a class=\"struct\" href=\"x86/bits64/paging/struct.VAddr.html\" title=\"struct x86::bits64::paging::VAddr\">VAddr</a>","synthetic":false,"types":["x86::bits64::paging::VAddr"]},{"text":"impl Clone for <a class=\"struct\" href=\"x86/bits64/paging/struct.PML4Flags.html\" title=\"struct x86::bits64::paging::PML4Flags\">PML4Flags</a>","synthetic":false,"types":["x86::bits64::paging::PML4Flags"]},{"text":"impl Clone for <a class=\"struct\" href=\"x86/bits64/paging/struct.PML4Entry.html\" title=\"struct x86::bits64::paging::PML4Entry\">PML4Entry</a>","synthetic":false,"types":["x86::bits64::paging::PML4Entry"]},{"text":"impl Clone for <a class=\"struct\" href=\"x86/bits64/paging/struct.PDPTFlags.html\" title=\"struct x86::bits64::paging::PDPTFlags\">PDPTFlags</a>","synthetic":false,"types":["x86::bits64::paging::PDPTFlags"]},{"text":"impl Clone for <a class=\"struct\" href=\"x86/bits64/paging/struct.PDPTEntry.html\" title=\"struct x86::bits64::paging::PDPTEntry\">PDPTEntry</a>","synthetic":false,"types":["x86::bits64::paging::PDPTEntry"]},{"text":"impl Clone for <a class=\"struct\" href=\"x86/bits64/paging/struct.PDFlags.html\" title=\"struct x86::bits64::paging::PDFlags\">PDFlags</a>","synthetic":false,"types":["x86::bits64::paging::PDFlags"]},{"text":"impl Clone for <a class=\"struct\" href=\"x86/bits64/paging/struct.PDEntry.html\" title=\"struct x86::bits64::paging::PDEntry\">PDEntry</a>","synthetic":false,"types":["x86::bits64::paging::PDEntry"]},{"text":"impl Clone for <a class=\"struct\" href=\"x86/bits64/paging/struct.PTFlags.html\" title=\"struct x86::bits64::paging::PTFlags\">PTFlags</a>","synthetic":false,"types":["x86::bits64::paging::PTFlags"]},{"text":"impl Clone for <a class=\"struct\" href=\"x86/bits64/paging/struct.PTEntry.html\" title=\"struct x86::bits64::paging::PTEntry\">PTEntry</a>","synthetic":false,"types":["x86::bits64::paging::PTEntry"]},{"text":"impl Clone for <a class=\"struct\" href=\"x86/bits64/rflags/struct.RFlags.html\" title=\"struct x86::bits64::rflags::RFlags\">RFlags</a>","synthetic":false,"types":["x86::bits64::rflags::RFlags"]},{"text":"impl Clone for <a class=\"struct\" href=\"x86/bits64/segmentation/struct.Descriptor64.html\" title=\"struct x86::bits64::segmentation::Descriptor64\">Descriptor64</a>","synthetic":false,"types":["x86::bits64::segmentation::Descriptor64"]},{"text":"impl Clone for <a class=\"struct\" href=\"x86/bits64/task/struct.TaskStateSegment.html\" title=\"struct x86::bits64::task::TaskStateSegment\">TaskStateSegment</a>","synthetic":false,"types":["x86::bits64::task::TaskStateSegment"]},{"text":"impl Clone for <a class=\"enum\" href=\"x86/apic/enum.ApicId.html\" title=\"enum x86::apic::ApicId\">ApicId</a>","synthetic":false,"types":["x86::apic::ApicId"]},{"text":"impl Clone for <a class=\"struct\" href=\"x86/controlregs/struct.Cr0.html\" title=\"struct x86::controlregs::Cr0\">Cr0</a>","synthetic":false,"types":["x86::controlregs::Cr0"]},{"text":"impl Clone for <a class=\"struct\" href=\"x86/controlregs/struct.Cr4.html\" title=\"struct x86::controlregs::Cr4\">Cr4</a>","synthetic":false,"types":["x86::controlregs::Cr4"]},{"text":"impl Clone for <a class=\"struct\" href=\"x86/controlregs/struct.Xcr0.html\" title=\"struct x86::controlregs::Xcr0\">Xcr0</a>","synthetic":false,"types":["x86::controlregs::Xcr0"]},{"text":"impl Clone for <a class=\"struct\" href=\"x86/irq/struct.PageFaultError.html\" title=\"struct x86::irq::PageFaultError\">PageFaultError</a>","synthetic":false,"types":["x86::irq::PageFaultError"]},{"text":"impl Clone for <a class=\"struct\" href=\"x86/segmentation/struct.SegmentSelector.html\" title=\"struct x86::segmentation::SegmentSelector\">SegmentSelector</a>","synthetic":false,"types":["x86::segmentation::SegmentSelector"]},{"text":"impl Clone for <a class=\"enum\" href=\"x86/segmentation/enum.SystemDescriptorTypes64.html\" title=\"enum x86::segmentation::SystemDescriptorTypes64\">SystemDescriptorTypes64</a>","synthetic":false,"types":["x86::segmentation::SystemDescriptorTypes64"]},{"text":"impl Clone for <a class=\"enum\" href=\"x86/segmentation/enum.SystemDescriptorTypes32.html\" title=\"enum x86::segmentation::SystemDescriptorTypes32\">SystemDescriptorTypes32</a>","synthetic":false,"types":["x86::segmentation::SystemDescriptorTypes32"]},{"text":"impl Clone for <a class=\"enum\" href=\"x86/segmentation/enum.DataSegmentType.html\" title=\"enum x86::segmentation::DataSegmentType\">DataSegmentType</a>","synthetic":false,"types":["x86::segmentation::DataSegmentType"]},{"text":"impl Clone for <a class=\"enum\" href=\"x86/segmentation/enum.CodeSegmentType.html\" title=\"enum x86::segmentation::CodeSegmentType\">CodeSegmentType</a>","synthetic":false,"types":["x86::segmentation::CodeSegmentType"]},{"text":"impl Clone for <a class=\"struct\" href=\"x86/segmentation/struct.Descriptor.html\" title=\"struct x86::segmentation::Descriptor\">Descriptor</a>","synthetic":false,"types":["x86::segmentation::Descriptor"]},{"text":"impl Clone for <a class=\"struct\" href=\"x86/vmx/vmcs/control/struct.PinbasedControls.html\" title=\"struct x86::vmx::vmcs::control::PinbasedControls\">PinbasedControls</a>","synthetic":false,"types":["x86::vmx::vmcs::control::PinbasedControls"]},{"text":"impl Clone for <a class=\"struct\" href=\"x86/vmx/vmcs/control/struct.PrimaryControls.html\" title=\"struct x86::vmx::vmcs::control::PrimaryControls\">PrimaryControls</a>","synthetic":false,"types":["x86::vmx::vmcs::control::PrimaryControls"]},{"text":"impl Clone for <a class=\"struct\" href=\"x86/vmx/vmcs/control/struct.SecondaryControls.html\" title=\"struct x86::vmx::vmcs::control::SecondaryControls\">SecondaryControls</a>","synthetic":false,"types":["x86::vmx::vmcs::control::SecondaryControls"]},{"text":"impl Clone for <a class=\"struct\" href=\"x86/vmx/vmcs/control/struct.EntryControls.html\" title=\"struct x86::vmx::vmcs::control::EntryControls\">EntryControls</a>","synthetic":false,"types":["x86::vmx::vmcs::control::EntryControls"]},{"text":"impl Clone for <a class=\"struct\" href=\"x86/vmx/vmcs/control/struct.ExitControls.html\" title=\"struct x86::vmx::vmcs::control::ExitControls\">ExitControls</a>","synthetic":false,"types":["x86::vmx::vmcs::control::ExitControls"]},{"text":"impl Clone for <a class=\"enum\" href=\"x86/enum.Ring.html\" title=\"enum x86::Ring\">Ring</a>","synthetic":false,"types":["x86::Ring"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()